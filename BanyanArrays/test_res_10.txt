response = Dict{String, Any}("clusters" => Dict{String, Any}("myfourthcluster" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-myfourthcluster-c478afa9fed824a7", "num_jobs" => 0, "status" => "terminated", "num_workers_in_use" => 0, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "", "aws_region" => "us-west-2", "last_job_created" => "", "num_workers" => 8, "current_cost_per_hour" => 0.0, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 0.0), "myfirstcluster" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-myfirstcluster-3bfa2b6ab21fc9cc", "num_jobs" => 0, "status" => "terminated", "num_workers_in_use" => 0, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "", "aws_region" => "us-west-2", "last_job_created" => "", "num_workers" => 20, "current_cost_per_hour" => 0.0, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 0.0), "pumpkincluster0" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-pumpkincluster0-3e15290827c0c584", "num_jobs" => 0, "status" => "running", "num_workers_in_use" => 4, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "2021-06-07-16:34:19", "aws_region" => "us-west-2", "last_job_created" => "2021-07-27-08:48:38", "num_workers" => 12, "current_cost_per_hour" => 0.2064, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 9284.364063285118)))
nworkers = 2
sample_rate = 2
[37m[1mTest Summary:               |[22m[39m
MapReduce-style computation | [36mNo tests[39m
[37m[1mTest Summary: |[22m[39m
HDF5          | [36mNo tests[39m
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((128000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAOAAAAAAAAEEA=")), Dict{String, Any}(), Sample(4.0, Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "2", true, true) => Future(nothing, "2", true, true))
curr_delayed_task.effects = Dict("4" => "CONST", "1" => "CONST", "2" => "MUT")
(128000000,)
size = 1024000040
size = 8
size = 8
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((128000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAOAAAAAAAAEEA=")), Dict{String, Any}(), Sample(4.0, Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "7", true, true) => Future(nothing, "7", true, true))
curr_delayed_task.effects = Dict("7" => "MUT", "6" => "CONST", "9" => "CONST")
(128000000,)
size = 1024000040
size = 8
size = 8
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((128000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAOAAAAAAAAEEA=")), Dict{String, Any}(), Sample(4.0, Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "12", true, true) => Future(nothing, "12", true, true))
curr_delayed_task.effects = Dict("12" => "MUT", "11" => "CONST", "14" => "CONST")
(128000000,)
size = 1024000040
size = 8
size = 8
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((128000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAOAAAAAAAAEEA=")), Dict{String, Any}(), Sample(4.0, Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "17", true, true) => Future(nothing, "17", true, true))
curr_delayed_task.effects = Dict("17" => "MUT", "19" => "CONST", "16" => "CONST")
(128000000,)
size = 1024000040
size = 8
size = 8
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((128000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAOAAAAAAAAEEA=")), Dict{String, Any}(), Sample(4.0, Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "22", true, true) => Future(nothing, "22", true, true))
curr_delayed_task.effects = Dict("24" => "CONST", "21" => "CONST", "22" => "MUT")
(128000000,)
size = 1024000040
size = 8
size = 8
size = 0
size = 0
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0MxMAAAAAAAAAAAEGIzU0IzU4IgAAAAAQWB9Om0QiAAAAACIAAAAATUxMvgEDIzU0FQAj4CMBAAAAAAAAAB9OAQRNYWluRAEDIzU0AUwvaG9tZS9jYWxlYndpbi9Qcm9qZWN0cy9iYW55YW4tanVsaWEvQmFueWFuQXJyYXlzL3Rlc3QvdGVzdF9ibGFja19zY2hvbGVzLmps0BBTH06bRAYAAAAzLAAARkZGRkY5IREjc2VsZiMAcABzAHQAcgB2AMRMGxVG7BYDViQfTgEETWFpbkQBAS8l4SXiFgJWJB9OAQRNYWluRAEDbG9nKOAWA1YkH06bRJckH06eRAEDVmFs4RYBVijiFgRWJB9OnkQBC2xpdGVyYWxfcG93JB9OAQRNYWluRAEBXiXlKOMWA1YkH04BBE1haW5EAQEqKOQOAAAAAAAA4D8WA1YkH04BBE1haW5EnSXkKOUWA1YkH04BBE1haW5EAQEqKOYl4xYDViQfTgEETWFpbkSdKOEo5xYCViQfTgEETWFpbkQBBHNxcnQl4xYDViQfTgEETWFpbkQBASol5SjpFgNWJB9OAQRNYWluRAEBLyjoKOo6KOsVAAbsAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAOwV304VRuA0EAEMTGluZUluZm9Ob2RlH06bRB9OAQRNYWluRAEDIzU0LAQA8d8VAAHlonV4eXd7FeUACAgICAhORk5OCQEAAAAAAAAACf//////////TExMTE7lKQ==")), Dict{String, Any}(), Sample(var"#54#58"(), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "27", true, true) => Future(nothing, "27", true, true))
curr_delayed_task.effects = Dict("12" => "CONST", "26" => "CONST", "17" => "CONST", "27" => "MUT", "2" => "CONST", "7" => "CONST", "22" => "CONST")
size = 0
size = 1024000040
size = 1024000040
size = 1024000040
size = 1024000040
size = 1024000040
size = 1024000040
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}()
curr_delayed_task.effects = Dict("28" => "CONST", "3" => "CONST")
size = 8
size = 8
size = 0
size = 0
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0MxMCAAAAAAAAAAEGIzU1IzU5IgAAAAAQWB9Om0QiAAAAACIAAAAATUxMvgEDIzU1FQAj4CMDAAAAAAAAAB9OAQRNYWluRAEDIzU1AUwvaG9tZS9jYWxlYndpbi9Qcm9qZWN0cy9iYW55YW4tanVsaWEvQmFueWFuQXJyYXlzL3Rlc3QvdGVzdF9ibGFja19zY2hvbGVzLmps2RBTH06bRAQAAAAzLAAARkZGOSEOI3NlbGYjAGQxAHYAdADCTBsVRuMWAlYkH04BBE1haW5EAQRzcXJ0JeMWA1YkH04BBE1haW5EAQEqJeIo4BYDViQfTgEETWFpbkQBAS0l4SjhOijiFQAG4wEAAAABAAAAAQAAAAEAAADjFd9OFUbgNBABDExpbmVJbmZvTm9kZR9Om0QfTgEETWFpbkQBAyM1NSwEAPrfFQAB46IBAmQxe3kV4wAICAhORk5OCQEAAAAAAAAACf//////////TExMTE7jKQ==")), Dict{String, Any}(), Sample(var"#55#59"(), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "30", true, true) => Future(nothing, "30", true, true))
curr_delayed_task.effects = Dict("29" => "CONST", "12" => "CONST", "27" => "CONST", "22" => "CONST", "30" => "MUT")
size = 0
size = 1024000040
size = 1024000040
size = 1024000040
size = 1024000040
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}()
curr_delayed_task.effects = Dict("31" => "CONST", "28" => "CONST")
size = 8
size = 8
size = 0
size = 0
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0MxMEAAAAAAAAAAEGIzU2IzYwIgAAAAAQWB9Om0QiAAAAACIAAAAATUxMvgEDIzU2FQAj4CMFAAAAAAAAAB9OAQRNYWluRAEDIzU2AUwvaG9tZS9jYWxlYndpbi9Qcm9qZWN0cy9iYW55YW4tanVsaWEvQmFueWFuQXJyYXlzL3Rlc3QvdGVzdF9ibGFja19zY2hvbGVzLmps3BBTH06bRAcAAAAzLAAARkZGRkZGOSEVI3NlbGYjAGQxAGQyAHAAcwB0AHIAxUwbFUbqFgFWJB9OAQRNYWluRAEGTm9ybWFsFgNWJB9OAQRNYWluRAEDY2RmKOAl4RYDViQfTgEETWFpbkQBASoo4SXjFgFWJB9OAQRNYWluRAEGTm9ybWFsFgNWJB9OAQRNYWluRAEDY2RmKOMl4hYCViQfTgEETWFpbkQBAS0l5hYDViQfTgEETWFpbkQBASoo5SXlFgJWJB9OAQRNYWluRAEDZXhwKOYWBFYkH04BBE1haW5EAQEqKOQl5CjnFgNWJB9OAQRNYWluRAEBLSjiKOg6KOkVAAbqAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAADqFd9OFUbgNBABDExpbmVJbmZvTm9kZR9Om0QfTgEETWFpbkQBAyM1NiwEAP3fFQAB5qIBAmQxAQJkMnV4eXcV5gAICAgICAhORk5OCQEAAAAAAAAACf//////////TExMTE7mKQ==")), Dict{String, Any}(), Sample(var"#56#60"(), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "33", true, true) => Future(nothing, "33", true, true))
curr_delayed_task.effects = Dict("32" => "CONST", "12" => "CONST", "17" => "CONST", "27" => "CONST", "2" => "CONST", "7" => "CONST", "33" => "MUT", "30" => "CONST")
size = 0
size = 1024000040
size = 1024000040
size = 1024000040
size = 1024000040
size = 1024000040
size = 1024000040
size = 1024000040
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}()
curr_delayed_task.effects = Dict("34" => "CONST", "28" => "CONST")
size = 8
size = 8
size = 0
size = 0
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0EAECIysfTp5E")), Dict{String, Any}(), Sample(+, Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
dims = Colon()
size = 0
size = 0
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0EAEFQ29sb24fTp5E")), Dict{String, Any}(), Sample(Colon(), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 0
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0EAEFUGFpcnMfTp4BCUl0ZXJhdG9yc0QEAAAAR0dLEAEKTmFtZWRUdXBsZR9Om0QCAAAAREs0LAIARA==")), Dict{String, Any}(), Sample(Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}(), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "37", true, true) => Future(nothing, "37", true, true), Future(nothing, "36", true, true) => Future(nothing, "36", true, true))
curr_delayed_task.effects = Dict("39" => "CONST", "36" => "MUT", "38" => "CONST", "33" => "CONST", "37" => "MUT", "35" => "CONST")
size(A) = (128000000,)
dims = Colon()
size = 0
size = 1024000040
size = 0
size = 0
size = 8
size = 0
size = 0
size = 8
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "37", true, true) => Future(nothing, "37", true, true))
curr_delayed_task.effects = Dict("37" => "MUT")
size = 8
t.mutation = Dict{Future, Future}(Future(nothing, "2", true, true) => Future(nothing, "2", true, true))
t.effects = Dict("4" => "CONST", "1" => "CONST", "2" => "MUT")
t.mutation = Dict{Future, Future}(Future(nothing, "7", true, true) => Future(nothing, "7", true, true))
t.effects = Dict("7" => "MUT", "6" => "CONST", "9" => "CONST")
t.mutation = Dict{Future, Future}(Future(nothing, "12", true, true) => Future(nothing, "12", true, true))
t.effects = Dict("12" => "MUT", "11" => "CONST", "14" => "CONST")
t.mutation = Dict{Future, Future}(Future(nothing, "17", true, true) => Future(nothing, "17", true, true))
t.effects = Dict("17" => "MUT", "19" => "CONST", "16" => "CONST")
t.mutation = Dict{Future, Future}(Future(nothing, "22", true, true) => Future(nothing, "22", true, true))
t.effects = Dict("24" => "CONST", "21" => "CONST", "22" => "MUT")
t.mutation = Dict{Future, Future}(Future(nothing, "27", true, true) => Future(nothing, "27", true, true))
t.effects = Dict("12" => "CONST", "26" => "CONST", "17" => "CONST", "27" => "MUT", "2" => "CONST", "7" => "CONST", "22" => "CONST")
t.mutation = Dict{Future, Future}()
t.effects = Dict("28" => "CONST", "3" => "CONST")
t.mutation = Dict{Future, Future}(Future(nothing, "30", true, true) => Future(nothing, "30", true, true))
t.effects = Dict("29" => "CONST", "12" => "CONST", "27" => "CONST", "22" => "CONST", "30" => "MUT")
t.mutation = Dict{Future, Future}()
t.effects = Dict("31" => "CONST", "28" => "CONST")
t.mutation = Dict{Future, Future}(Future(nothing, "33", true, true) => Future(nothing, "33", true, true))
t.effects = Dict("32" => "CONST", "12" => "CONST", "17" => "CONST", "27" => "CONST", "2" => "CONST", "7" => "CONST", "33" => "MUT", "30" => "CONST")
t.mutation = Dict{Future, Future}()
t.effects = Dict("34" => "CONST", "28" => "CONST")
t.mutation = Dict{Future, Future}(Future(nothing, "37", true, true) => Future(nothing, "37", true, true), Future(nothing, "36", true, true) => Future(nothing, "36", true, true))
t.effects = Dict("39" => "CONST", "36" => "MUT", "38" => "CONST", "33" => "CONST", "37" => "MUT", "35" => "CONST")
t.mutation = Dict{Future, Future}(Future(nothing, "37", true, true) => Future(nothing, "37", true, true))
t.effects = Dict("37" => "MUT")
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "37", true, true) => Future(nothing, "37", true, true))
curr_delayed_task.effects = Dict("37" => "MUT")
t.code = "A = A\nv = v\nfillingdims = fillingdims\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:222 =#\n    A = Base.fill(v, fillingdims)\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:223 =#\n    println(size(A))\nend"
t.value_names = [("2", "A"), ("4", "v"), ("1", "fillingdims")]
t.mutation = Dict{Future, Future}(Future(nothing, "2", true, true) => Future(nothing, "2", true, true))
t.effects = Dict("4" => "CONST", "1" => "CONST", "2" => "MUT")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("4" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("4", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("4", 0)])]))]), "1" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("1", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("1", 0)])]))]), "2" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("1", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("1", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("4", 0), ("4", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("1", 0), ("1", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("2", 0), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("4", 0), ("1", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("4", 1), ("1", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("4", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("1", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("2", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("4" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("4", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("4", 0)])]))]), "1" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("1", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("1", 0)])]))]), "2" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("1", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("1", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("4", 0), ("4", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("1", 0), ("1", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("2", 0), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("4", 0), ("1", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("4", 1), ("1", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("4", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("1", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("2", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("4" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("4", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("4", 0)])]))]), "1" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("1", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("1", 0)])]))]), "2" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("4", 0), ("4", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("1", 0), ("1", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("2", 0), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("4", 0), ("1", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("4", 1), ("1", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("4", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("1", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("2", 1)])]))
t.code = "A = A\nv = v\nfillingdims = fillingdims\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:222 =#\n    A = Base.fill(v, fillingdims)\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:223 =#\n    println(size(A))\nend"
t.value_names = [("7", "A"), ("9", "v"), ("6", "fillingdims")]
t.mutation = Dict{Future, Future}(Future(nothing, "7", true, true) => Future(nothing, "7", true, true))
t.effects = Dict("7" => "MUT", "6" => "CONST", "9" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("7" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0)])]))]), "6" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("6", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("6", 0)])]))]), "9" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("9", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("9", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("6", 0), ("7", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("6", 1), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("7", 0), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("6", 0), ("6", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("9", 0), ("9", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("7", 0), ("6", 0), ("9", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("7", 1), ("6", 1), ("9", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("7", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("6", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("9", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("7" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[]))]), "6" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("6", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("6", 0)])]))]), "9" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("9", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("9", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("6", 0), ("7", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("6", 1), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("7", 0), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("6", 0), ("6", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("9", 0), ("9", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("7", 0), ("6", 0), ("9", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("7", 1), ("6", 1), ("9", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("7", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("6", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("9", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("7" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0)])]))]), "6" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("6", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("6", 0)])]))]), "9" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("9", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("9", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("7", 0), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("6", 0), ("6", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("9", 0), ("9", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("7", 0), ("6", 0), ("9", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("7", 1), ("6", 1), ("9", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("7", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("6", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("9", 1)])]))
t.code = "A = A\nv = v\nfillingdims = fillingdims\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:222 =#\n    A = Base.fill(v, fillingdims)\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:223 =#\n    println(size(A))\nend"
t.value_names = [("12", "A"), ("14", "v"), ("11", "fillingdims")]
t.mutation = Dict{Future, Future}(Future(nothing, "12", true, true) => Future(nothing, "12", true, true))
t.effects = Dict("12" => "MUT", "11" => "CONST", "14" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])]))]), "11" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("11", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("11", 0)])]))]), "14" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("14", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("14", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("11", 0), ("12", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("11", 1), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("11", 0), ("11", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("14", 0), ("14", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 0), ("11", 0), ("14", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 1), ("11", 1), ("14", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("11", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("14", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[]))]), "11" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("11", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("11", 0)])]))]), "14" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("14", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("14", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("11", 0), ("12", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("11", 1), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("11", 0), ("11", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("14", 0), ("14", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 0), ("11", 0), ("14", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 1), ("11", 1), ("14", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("11", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("14", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])]))]), "11" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("11", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("11", 0)])]))]), "14" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("14", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("14", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("11", 0), ("11", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("14", 0), ("14", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 0), ("11", 0), ("14", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 1), ("11", 1), ("14", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("11", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("14", 1)])]))
t.code = "A = A\nv = v\nfillingdims = fillingdims\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:222 =#\n    A = Base.fill(v, fillingdims)\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:223 =#\n    println(size(A))\nend"
t.value_names = [("17", "A"), ("19", "v"), ("16", "fillingdims")]
t.mutation = Dict{Future, Future}(Future(nothing, "17", true, true) => Future(nothing, "17", true, true))
t.effects = Dict("17" => "MUT", "19" => "CONST", "16" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("17" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0)])]))]), "19" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("19", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("19", 0)])]))]), "16" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("16", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("16", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("16", 0), ("17", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("16", 1), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("17", 0), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("19", 0), ("19", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("16", 0), ("16", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("17", 0), ("19", 0), ("16", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("17", 1), ("19", 1), ("16", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("17", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("19", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("16", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("17" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[]))]), "19" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("19", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("19", 0)])]))]), "16" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("16", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("16", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("16", 0), ("17", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("16", 1), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("17", 0), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("19", 0), ("19", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("16", 0), ("16", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("17", 0), ("19", 0), ("16", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("17", 1), ("19", 1), ("16", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("17", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("19", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("16", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("17" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0)])]))]), "19" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("19", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("19", 0)])]))]), "16" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("16", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("16", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("17", 0), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("19", 0), ("19", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("16", 0), ("16", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("17", 0), ("19", 0), ("16", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("17", 1), ("19", 1), ("16", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("17", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("19", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("16", 1)])]))
t.code = "A = A\nv = v\nfillingdims = fillingdims\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:222 =#\n    A = Base.fill(v, fillingdims)\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:223 =#\n    println(size(A))\nend"
t.value_names = [("22", "A"), ("24", "v"), ("21", "fillingdims")]
t.mutation = Dict{Future, Future}(Future(nothing, "22", true, true) => Future(nothing, "22", true, true))
t.effects = Dict("24" => "CONST", "21" => "CONST", "22" => "MUT")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("24" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("24", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("24", 0)])]))]), "21" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("21", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("21", 0)])]))]), "22" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("21", 0), ("22", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("21", 1), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("24", 0), ("24", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("21", 0), ("21", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("22", 0), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("24", 0), ("21", 0), ("22", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("24", 1), ("21", 1), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("24", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("21", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("22", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("24" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("24", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("24", 0)])]))]), "21" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("21", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("21", 0)])]))]), "22" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("21", 0), ("22", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("21", 1), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("24", 0), ("24", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("21", 0), ("21", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("22", 0), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("24", 0), ("21", 0), ("22", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("24", 1), ("21", 1), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("24", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("21", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("22", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("24" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("24", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("24", 0)])]))]), "21" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("21", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("21", 0)])]))]), "22" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("24", 0), ("24", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("21", 0), ("21", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("22", 0), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("24", 0), ("21", 0), ("22", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("24", 1), ("21", 1), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("24", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("21", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("22", 1)])]))
t.code = "f = f\nc = [c_1, c_2, c_3, c_4, c_5, ]\nres = res\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:338 =#\n    res = Base.map(f, c...)\nend"
t.value_names = [("26", "f"), ("2", "c_1"), ("7", "c_2"), ("12", "c_3"), ("17", "c_4"), ("22", "c_5"), ("27", "res")]
t.mutation = Dict{Future, Future}(Future(nothing, "27", true, true) => Future(nothing, "27", true, true))
t.effects = Dict("12" => "CONST", "26" => "CONST", "17" => "CONST", "27" => "MUT", "2" => "CONST", "7" => "CONST", "22" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])]))]), "26" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("26", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("26", 0)])]))]), "17" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0)])]))]), "27" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0)])]))]), "2" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0)])]))]), "7" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0)])]))]), "22" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("7", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("7", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("12", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("12", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("17", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("17", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("22", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("22", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("27", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("27", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("26", 0), ("26", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("17", 0), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("27", 0), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("2", 0), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("7", 0), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("22", 0), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 0), ("26", 0), ("17", 0), ("27", 0), ("2", 0), ("7", 0), ("22", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 1), ("26", 1), ("17", 1), ("27", 1), ("2", 1), ("7", 1), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("26", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("17", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("27", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("2", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("7", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("22", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0), ("2", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0), ("2", 0)])]))]), "26" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("26", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("26", 0)])]))]), "17" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0), ("2", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0), ("2", 0)])]))]), "27" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0), ("2", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0), ("2", 0)])]))]), "2" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0), ("27", 0)])]))]), "7" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0), ("2", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0), ("2", 0)])]))]), "22" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0), ("2", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0), ("2", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("7", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("7", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("12", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("12", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("17", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("17", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("22", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("22", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("27", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("27", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("26", 0), ("26", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("17", 0), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("27", 0), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("2", 0), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("7", 0), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("22", 0), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 0), ("26", 0), ("17", 0), ("27", 0), ("2", 0), ("7", 0), ("22", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 1), ("26", 1), ("17", 1), ("27", 1), ("2", 1), ("7", 1), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("26", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("17", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("27", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("2", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("7", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("22", 1)])]))
t.code = "fut = fut\nres = res\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:45 =#\n    res = Base.deepcopy(fut)\nend"
t.value_names = [("3", "fut"), ("28", "res")]
t.mutation = Dict{Future, Future}()
t.effects = Dict("28" => "CONST", "3" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("28" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("28", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("28", 0)])]))]), "3" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("3", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("3", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("28", 0), ("3", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("28", 1), ("3", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("28", 0), ("28", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("3", 0), ("3", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("28", 0), ("3", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("28", 1), ("3", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("28", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("3", 1)])]))
t.code = "f = f\nc = [c_1, c_2, c_3, ]\nres = res\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:338 =#\n    res = Base.map(f, c...)\nend"
t.value_names = [("29", "f"), ("27", "c_1"), ("22", "c_2"), ("12", "c_3"), ("30", "res")]
t.mutation = Dict{Future, Future}(Future(nothing, "30", true, true) => Future(nothing, "30", true, true))
t.effects = Dict("29" => "CONST", "12" => "CONST", "27" => "CONST", "22" => "CONST", "30" => "MUT")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("29" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("29", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("29", 0)])]))]), "12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])]))]), "27" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0)])]))]), "22" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0)])]))]), "30" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("30", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("30", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("22", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("22", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("12", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("12", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("30", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("30", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("29", 0), ("29", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("27", 0), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("22", 0), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("30", 0), ("30", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("29", 0), ("12", 0), ("27", 0), ("22", 0), ("30", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("29", 1), ("12", 1), ("27", 1), ("22", 1), ("30", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("29", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("27", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("22", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("30", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("29" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("29", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("29", 0)])]))]), "12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0), ("27", 0)])]))]), "27" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0), ("30", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0), ("30", 0)])]))]), "22" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0), ("27", 0)])]))]), "30" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("30", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("30", 0), ("27", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("22", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("22", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("12", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("12", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("30", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("30", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("29", 0), ("29", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("27", 0), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("22", 0), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("30", 0), ("30", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("29", 0), ("12", 0), ("27", 0), ("22", 0), ("30", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("29", 1), ("12", 1), ("27", 1), ("22", 1), ("30", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("29", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("27", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("22", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("30", 1)])]))
t.code = "fut = fut\nres = res\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:45 =#\n    res = Base.deepcopy(fut)\nend"
t.value_names = [("28", "fut"), ("31", "res")]
t.mutation = Dict{Future, Future}()
t.effects = Dict("31" => "CONST", "28" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("31" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("31", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("31", 0)])]))]), "28" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("28", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("28", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("31", 0), ("28", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("31", 1), ("28", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("31", 0), ("31", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("28", 0), ("28", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("31", 0), ("28", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("31", 1), ("28", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("31", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("28", 1)])]))
t.code = "f = f\nc = [c_1, c_2, c_3, c_4, c_5, c_6, ]\nres = res\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:338 =#\n    res = Base.map(f, c...)\nend"
t.value_names = [("32", "f"), ("27", "c_1"), ("30", "c_2"), ("2", "c_3"), ("7", "c_4"), ("12", "c_5"), ("17", "c_6"), ("33", "res")]
t.mutation = Dict{Future, Future}(Future(nothing, "33", true, true) => Future(nothing, "33", true, true))
t.effects = Dict("32" => "CONST", "12" => "CONST", "17" => "CONST", "27" => "CONST", "2" => "CONST", "7" => "CONST", "33" => "MUT", "30" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("32" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("32", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("32", 0)])]))]), "12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])]))]), "17" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0)])]))]), "27" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0)])]))]), "2" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0)])]))]), "7" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0)])]))]), "33" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("33", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("33", 0)])]))]), "30" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("30", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("30", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("30", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("30", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("2", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("2", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("7", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("7", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("12", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("12", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("17", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("17", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("33", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("33", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("32", 0), ("32", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("17", 0), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("27", 0), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("2", 0), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("7", 0), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("33", 0), ("33", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("30", 0), ("30", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("32", 0), ("12", 0), ("17", 0), ("27", 0), ("2", 0), ("7", 0), ("33", 0), ("30", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("32", 1), ("12", 1), ("17", 1), ("27", 1), ("2", 1), ("7", 1), ("33", 1), ("30", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("32", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("17", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("27", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("2", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("7", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("33", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("30", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("32" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("32", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("32", 0)])]))]), "12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0), ("27", 0)])]))]), "17" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0), ("27", 0)])]))]), "27" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0), ("33", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0), ("33", 0)])]))]), "2" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0), ("27", 0)])]))]), "7" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0), ("27", 0)])]))]), "33" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("33", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("33", 0), ("27", 0)])]))]), "30" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("30", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("30", 0), ("27", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("30", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("30", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("2", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("2", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("7", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("7", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("12", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("12", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("17", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("17", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("33", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("33", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("32", 0), ("32", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("17", 0), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("27", 0), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("2", 0), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("7", 0), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("33", 0), ("33", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("30", 0), ("30", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("32", 0), ("12", 0), ("17", 0), ("27", 0), ("2", 0), ("7", 0), ("33", 0), ("30", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("32", 1), ("12", 1), ("17", 1), ("27", 1), ("2", 1), ("7", 1), ("33", 1), ("30", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("32", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("17", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("27", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("2", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("7", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("33", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("30", 1)])]))
t.code = "fut = fut\nres = res\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:45 =#\n    res = Base.deepcopy(fut)\nend"
t.value_names = [("28", "fut"), ("34", "res")]
t.mutation = Dict{Future, Future}()
t.effects = Dict("34" => "CONST", "28" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("34" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("34", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("34", 0)])]))]), "28" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("28", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("28", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("34", 0), ("28", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("34", 1), ("28", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("34", 0), ("34", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("28", 0), ("28", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("34", 0), ("28", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("34", 1), ("28", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("34", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("28", 1)])]))
t.code = "op = op\nA = A\ndims = dims\nkwargs = kwargs\nres = res\nres_size = res_size\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:450 =#\n    if is_debug_on()\n        #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:451 =#\n        #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:451 =# @show size(A)\n        #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:452 =#\n        #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:452 =# @show dims\n    end\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:454 =#\n    res = Base.reduce(op, A; dims = dims, kwargs...)\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:455 =#\n    if res isa Array\n        #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:456 =#\n        res_size = Base.size(res)\n    end\nend"
t.value_names = [("35", "op"), ("33", "A"), ("38", "dims"), ("39", "kwargs"), ("37", "res"), ("36", "res_size")]
t.mutation = Dict{Future, Future}(Future(nothing, "37", true, true) => Future(nothing, "37", true, true), Future(nothing, "36", true, true) => Future(nothing, "36", true, true))
t.effects = Dict("39" => "CONST", "36" => "MUT", "38" => "CONST", "33" => "CONST", "37" => "MUT", "35" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("39" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("39", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("39", 0)])]))]), "36" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "with_key" => true, "replication" => nothing, "reducer" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA1EAEERGljdB9OnkQCAAAAACFGAgAAADkhDWlzX2Jhbnlhbl91ZGZNIQRjb2RlFgIBBWJsb2NrFzG4AQAAAT4vaG9tZS9jYWxlYndpbi9Qcm9qZWN0cy9iYW55YW4tanVsaWEvQmFueWFuQXJyYXlzL3NyYy9hcnJheS5qbBYCAQItPgEEYXhpcxYCAQVibG9jaxcxuAEAACwEABYCAQItPhYCpGZnFgIBBWJsb2NrFzG4AQAALAQAFgVWAQppbmRleGFwcGx5nWZnFgIBAmt3AQVpbmRleAEEYXhpcw==")), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("36", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "with_key" => true, "replication" => nothing, "reducer" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA1EAEERGljdB9OnkQCAAAAACFGAgAAADkhDWlzX2Jhbnlhbl91ZGZNIQRjb2RlFgIBBWJsb2NrFzG4AQAAAT4vaG9tZS9jYWxlYndpbi9Qcm9qZWN0cy9iYW55YW4tanVsaWEvQmFueWFuQXJyYXlzL3NyYy9hcnJheS5qbBYCAQItPgEEYXhpcxYCAQVibG9jaxcxuAEAACwEABYCAQItPhYCpGZnFgIBBWJsb2NrFzG4AQAALAQAFgVWAQppbmRleGFwcGx5nWZnFgIBAmt3AQVpbmRleAEEYXhpcw==")), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("36", 0)])]))]), "38" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("38", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("38", 0)])]))]), "33" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("33", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("33", 0)])]))]), "37" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "with_key" => false, "replication" => nothing, "reducer" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0EAECIysfTp5E")), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("37", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "with_key" => false, "replication" => nothing, "reducer" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0EAECIysfTp5E")), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("37", 0)])]))]), "35" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("35", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("35", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("36", 0), ("33", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("36", 1), ("33", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("39", 0), ("39", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("36", 0), ("36", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("38", 0), ("38", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("33", 0), ("33", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("37", 0), ("37", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("35", 0), ("35", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("39", 0), ("36", 0), ("38", 0), ("33", 0), ("37", 0), ("35", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("39", 1), ("36", 1), ("38", 1), ("33", 1), ("37", 1), ("35", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("39", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("36", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("38", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("33", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("37", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("35", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("39" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("39", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("39", 0)])]))]), "36" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "with_key" => true, "replication" => nothing, "reducer" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA1EAEERGljdB9OnkQCAAAAACFGAgAAADkhDWlzX2Jhbnlhbl91ZGZNIQRjb2RlFgIBBWJsb2NrFzG4AQAAAT4vaG9tZS9jYWxlYndpbi9Qcm9qZWN0cy9iYW55YW4tanVsaWEvQmFueWFuQXJyYXlzL3NyYy9hcnJheS5qbBYCAQItPgEEYXhpcxYCAQVibG9jaxcxuAEAACwEABYCAQItPhYCpGZnFgIBBWJsb2NrFzG4AQAALAQAFgVWAQppbmRleGFwcGx5nWZnFgIBAmt3AQVpbmRleAEEYXhpcw==")), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("36", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "with_key" => true, "replication" => nothing, "reducer" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA1EAEERGljdB9OnkQCAAAAACFGAgAAADkhDWlzX2Jhbnlhbl91ZGZNIQRjb2RlFgIBBWJsb2NrFzG4AQAAAT4vaG9tZS9jYWxlYndpbi9Qcm9qZWN0cy9iYW55YW4tanVsaWEvQmFueWFuQXJyYXlzL3NyYy9hcnJheS5qbBYCAQItPgEEYXhpcxYCAQVibG9jaxcxuAEAACwEABYCAQItPhYCpGZnFgIBBWJsb2NrFzG4AQAALAQAFgVWAQppbmRleGFwcGx5nWZnFgIBAmt3AQVpbmRleAEEYXhpcw==")), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("36", 0)])]))]), "38" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("38", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("38", 0)])]))]), "33" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[]))]), "37" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "with_key" => false, "replication" => nothing, "reducer" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0EAECIysfTp5E")), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("37", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "with_key" => false, "replication" => nothing, "reducer" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0EAECIysfTp5E")), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("37", 0)])]))]), "35" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("35", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("35", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("36", 0), ("33", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("36", 1), ("33", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("39", 0), ("39", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("36", 0), ("36", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("38", 0), ("38", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("33", 0), ("33", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("37", 0), ("37", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("35", 0), ("35", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("39", 0), ("36", 0), ("38", 0), ("33", 0), ("37", 0), ("35", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("39", 1), ("36", 1), ("38", 1), ("33", 1), ("37", 1), ("35", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("39", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("36", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("38", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("33", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("37", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("35", 1)])]))
t.code = "fut = fut\nbegin\n    #= /home/calebwin/Projects/banyan-julia/Banyan/src/requests.jl:293 =#\nend"
t.value_names = [("37", "fut")]
t.mutation = Dict{Future, Future}(Future(nothing, "37", true, true) => Future(nothing, "37", true, true))
t.effects = Dict("37" => "MUT")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("37" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("37", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("37", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("37", 0), ("37", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("37", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("37", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("37", 1)])]))
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 0
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
response = Dict{String, Any}("clusters" => Dict{String, Any}("myfourthcluster" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-myfourthcluster-c478afa9fed824a7", "num_jobs" => 0, "status" => "terminated", "num_workers_in_use" => 0, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "", "aws_region" => "us-west-2", "last_job_created" => "", "num_workers" => 8, "current_cost_per_hour" => 0.0, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 0.0), "myfirstcluster" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-myfirstcluster-3bfa2b6ab21fc9cc", "num_jobs" => 0, "status" => "terminated", "num_workers_in_use" => 0, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "", "aws_region" => "us-west-2", "last_job_created" => "", "num_workers" => 20, "current_cost_per_hour" => 0.0, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 0.0), "pumpkincluster0" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-pumpkincluster0-3e15290827c0c584", "num_jobs" => 0, "status" => "running", "num_workers_in_use" => 4, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "2021-06-07-16:34:19", "aws_region" => "us-west-2", "last_job_created" => "2021-07-27-09:39:18", "num_workers" => 12, "current_cost_per_hour" => 0.2064, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 9286.055764304801)))
response = Dict{String, Any}("clusters" => Dict{String, Any}("myfourthcluster" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-myfourthcluster-c478afa9fed824a7", "num_jobs" => 0, "status" => "terminated", "num_workers_in_use" => 0, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "", "aws_region" => "us-west-2", "last_job_created" => "", "num_workers" => 8, "current_cost_per_hour" => 0.0, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 0.0), "myfirstcluster" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-myfirstcluster-3bfa2b6ab21fc9cc", "num_jobs" => 0, "status" => "terminated", "num_workers_in_use" => 0, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "", "aws_region" => "us-west-2", "last_job_created" => "", "num_workers" => 20, "current_cost_per_hour" => 0.0, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 0.0), "pumpkincluster0" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-pumpkincluster0-3e15290827c0c584", "num_jobs" => 0, "status" => "running", "num_workers_in_use" => 4, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "2021-06-07-16:34:19", "aws_region" => "us-west-2", "last_job_created" => "2021-07-27-09:39:18", "num_workers" => 12, "current_cost_per_hour" => 0.2064, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 9286.0560383266)))
nworkers = 2
sample_rate = 2
[37m[1mTest Summary:               |[22m[39m
MapReduce-style computation | [36mNo tests[39m
response = Dict{String, Any}("clusters" => Dict{String, Any}("myfourthcluster" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-myfourthcluster-c478afa9fed824a7", "num_jobs" => 0, "status" => "terminated", "num_workers_in_use" => 0, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "", "aws_region" => "us-west-2", "last_job_created" => "", "num_workers" => 8, "current_cost_per_hour" => 0.0, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 0.0), "myfirstcluster" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-myfirstcluster-3bfa2b6ab21fc9cc", "num_jobs" => 0, "status" => "terminated", "num_workers_in_use" => 0, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "", "aws_region" => "us-west-2", "last_job_created" => "", "num_workers" => 20, "current_cost_per_hour" => 0.0, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 0.0), "pumpkincluster0" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-pumpkincluster0-3e15290827c0c584", "num_jobs" => 0, "status" => "running", "num_workers_in_use" => 4, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "2021-06-07-16:34:19", "aws_region" => "us-west-2", "last_job_created" => "2021-07-27-14:54:57", "num_workers" => 12, "current_cost_per_hour" => 0.2064, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 9286.060593512366)))
response = Dict{String, Any}("clusters" => Dict{String, Any}("myfourthcluster" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-myfourthcluster-c478afa9fed824a7", "num_jobs" => 0, "status" => "terminated", "num_workers_in_use" => 0, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "", "aws_region" => "us-west-2", "last_job_created" => "", "num_workers" => 8, "current_cost_per_hour" => 0.0, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 0.0), "myfirstcluster" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-myfirstcluster-3bfa2b6ab21fc9cc", "num_jobs" => 0, "status" => "terminated", "num_workers_in_use" => 0, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "", "aws_region" => "us-west-2", "last_job_created" => "", "num_workers" => 20, "current_cost_per_hour" => 0.0, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 0.0), "pumpkincluster0" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-pumpkincluster0-3e15290827c0c584", "num_jobs" => 0, "status" => "running", "num_workers_in_use" => 4, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "2021-06-07-16:34:19", "aws_region" => "us-west-2", "last_job_created" => "2021-07-27-14:54:57", "num_workers" => 12, "current_cost_per_hour" => 0.2064, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 9286.060843452733)))
nworkers = 2
sample_rate = 2
[37m[1mTest Summary:               |[22m[39m
MapReduce-style computation | [36mNo tests[39m
response = Dict{String, Any}("clusters" => Dict{String, Any}("myfourthcluster" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-myfourthcluster-c478afa9fed824a7", "num_jobs" => 0, "status" => "terminated", "num_workers_in_use" => 0, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "", "aws_region" => "us-west-2", "last_job_created" => "", "num_workers" => 8, "current_cost_per_hour" => 0.0, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 0.0), "myfirstcluster" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-myfirstcluster-3bfa2b6ab21fc9cc", "num_jobs" => 0, "status" => "terminated", "num_workers_in_use" => 0, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "", "aws_region" => "us-west-2", "last_job_created" => "", "num_workers" => 20, "current_cost_per_hour" => 0.0, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 0.0), "pumpkincluster0" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-pumpkincluster0-3e15290827c0c584", "num_jobs" => 0, "status" => "running", "num_workers_in_use" => 4, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "2021-06-07-16:34:19", "aws_region" => "us-west-2", "last_job_created" => "2021-07-27-14:56:13", "num_workers" => 12, "current_cost_per_hour" => 0.2064, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 9286.066825100746)))
response = Dict{String, Any}("clusters" => Dict{String, Any}("myfourthcluster" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-myfourthcluster-c478afa9fed824a7", "num_jobs" => 0, "status" => "terminated", "num_workers_in_use" => 0, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "", "aws_region" => "us-west-2", "last_job_created" => "", "num_workers" => 8, "current_cost_per_hour" => 0.0, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 0.0), "myfirstcluster" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-myfirstcluster-3bfa2b6ab21fc9cc", "num_jobs" => 0, "status" => "terminated", "num_workers_in_use" => 0, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "", "aws_region" => "us-west-2", "last_job_created" => "", "num_workers" => 20, "current_cost_per_hour" => 0.0, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 0.0), "pumpkincluster0" => Dict{String, Any}("s3_read_write_resource" => "arn:aws:s3:::banyan-cluster-data-pumpkincluster0-3e15290827c0c584", "num_jobs" => 0, "status" => "running", "num_workers_in_use" => 4, "ec2_key_pair" => "CailinSSHKeyPair", "created" => "2021-06-07-16:34:19", "aws_region" => "us-west-2", "last_job_created" => "2021-07-27-14:56:13", "num_workers" => 12, "current_cost_per_hour" => 0.2064, "instance_type" => "t3.large", "usernames" => Any["pumpkinpie"], "estimated_cost" => 9286.067079691822)))
nworkers = 2
sample_rate = 2
[37m[1mTest Summary:               |[22m[39m
MapReduce-style computation | [36mNo tests[39m
[37m[1mTest Summary: |[22m[39m
HDF5          | [36mNo tests[39m
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((128000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAOAAAAAAAAEEA=")), Dict{String, Any}(), Sample(4.0, Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "2", true, true) => Future(nothing, "2", true, true))
curr_delayed_task.effects = Dict("4" => "CONST", "1" => "CONST", "2" => "MUT")
(128000000,)
size = 1024000040
size = 8
size = 8
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((128000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAOAAAAAAAAEEA=")), Dict{String, Any}(), Sample(4.0, Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "7", true, true) => Future(nothing, "7", true, true))
curr_delayed_task.effects = Dict("7" => "MUT", "6" => "CONST", "9" => "CONST")
(128000000,)
size = 1024000040
size = 8
size = 8
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((128000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAOAAAAAAAAEEA=")), Dict{String, Any}(), Sample(4.0, Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "12", true, true) => Future(nothing, "12", true, true))
curr_delayed_task.effects = Dict("12" => "MUT", "11" => "CONST", "14" => "CONST")
(128000000,)
size = 1024000040
size = 8
size = 8
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((128000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAOAAAAAAAAEEA=")), Dict{String, Any}(), Sample(4.0, Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "17", true, true) => Future(nothing, "17", true, true))
curr_delayed_task.effects = Dict("17" => "MUT", "19" => "CONST", "16" => "CONST")
(128000000,)
size = 1024000040
size = 8
size = 8
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((128000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAOAAAAAAAAEEA=")), Dict{String, Any}(), Sample(4.0, Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 8
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAAUATEAQEIP")), Dict{String, Any}(), Sample((256000000,), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "22", true, true) => Future(nothing, "22", true, true))
curr_delayed_task.effects = Dict("24" => "CONST", "21" => "CONST", "22" => "MUT")
(128000000,)
size = 1024000040
size = 8
size = 8
size = 0
size = 0
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0MxMAAAAAAAAAAAEGIzU2IzYwIgAAAAAQWB9Om0QiAAAAACIAAAAATUxMvgEDIzU2FQAj4CMBAAAAAAAAAB9OAQRNYWluRAEDIzU2AUwvaG9tZS9jYWxlYndpbi9Qcm9qZWN0cy9iYW55YW4tanVsaWEvQmFueWFuQXJyYXlzL3Rlc3QvdGVzdF9ibGFja19zY2hvbGVzLmps0BBTH06bRAYAAAAzLAAARkZGRkY5IREjc2VsZiMAcABzAHQAcgB2AMRMGxVG7BYDViQfTgEETWFpbkQBAS8l4SXiFgJWJB9OAQRNYWluRAEDbG9nKOAWA1YkH06bRJckH06eRAEDVmFs4RYBVijiFgRWJB9OnkQBC2xpdGVyYWxfcG93JB9OAQRNYWluRAEBXiXlKOMWA1YkH04BBE1haW5EAQEqKOQOAAAAAAAA4D8WA1YkH04BBE1haW5EnSXkKOUWA1YkH04BBE1haW5EAQEqKOYl4xYDViQfTgEETWFpbkSdKOEo5xYCViQfTgEETWFpbkQBBHNxcnQl4xYDViQfTgEETWFpbkQBASol5SjpFgNWJB9OAQRNYWluRAEBLyjoKOo6KOsVAAbsAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAOwV304VRuA0EAEMTGluZUluZm9Ob2RlH06bRB9OAQRNYWluRAEDIzU2LAQA8d8VAAHlonV4eXd7FeUACAgICAhORk5OCQEAAAAAAAAACf//////////TExMTE7lKQ==")), Dict{String, Any}(), Sample(var"#56#60"(), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "27", true, true) => Future(nothing, "27", true, true))
curr_delayed_task.effects = Dict("12" => "CONST", "26" => "CONST", "17" => "CONST", "27" => "MUT", "2" => "CONST", "7" => "CONST", "22" => "CONST")
size = 0
size = 1024000040
size = 1024000040
size = 1024000040
size = 1024000040
size = 1024000040
size = 1024000040
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}()
curr_delayed_task.effects = Dict("28" => "CONST", "3" => "CONST")
size = 8
size = 8
size = 0
size = 0
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0MxMCAAAAAAAAAAEGIzU3IzYxIgAAAAAQWB9Om0QiAAAAACIAAAAATUxMvgEDIzU3FQAj4CMDAAAAAAAAAB9OAQRNYWluRAEDIzU3AUwvaG9tZS9jYWxlYndpbi9Qcm9qZWN0cy9iYW55YW4tanVsaWEvQmFueWFuQXJyYXlzL3Rlc3QvdGVzdF9ibGFja19zY2hvbGVzLmps2RBTH06bRAQAAAAzLAAARkZGOSEOI3NlbGYjAGQxAHYAdADCTBsVRuMWAlYkH04BBE1haW5EAQRzcXJ0JeMWA1YkH04BBE1haW5EAQEqJeIo4BYDViQfTgEETWFpbkQBAS0l4SjhOijiFQAG4wEAAAABAAAAAQAAAAEAAADjFd9OFUbgNBABDExpbmVJbmZvTm9kZR9Om0QfTgEETWFpbkQBAyM1NywEAPrfFQAB46IBAmQxe3kV4wAICAhORk5OCQEAAAAAAAAACf//////////TExMTE7jKQ==")), Dict{String, Any}(), Sample(var"#57#61"(), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "30", true, true) => Future(nothing, "30", true, true))
curr_delayed_task.effects = Dict("29" => "CONST", "12" => "CONST", "27" => "CONST", "22" => "CONST", "30" => "MUT")
size = 0
size = 1024000040
size = 1024000040
size = 1024000040
size = 1024000040
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}()
curr_delayed_task.effects = Dict("31" => "CONST", "28" => "CONST")
size = 8
size = 8
size = 0
size = 0
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0MxMEAAAAAAAAAAEGIzU4IzYyIgAAAAAQWB9Om0QiAAAAACIAAAAATUxMvgEDIzU4FQAj4CMFAAAAAAAAAB9OAQRNYWluRAEDIzU4AUwvaG9tZS9jYWxlYndpbi9Qcm9qZWN0cy9iYW55YW4tanVsaWEvQmFueWFuQXJyYXlzL3Rlc3QvdGVzdF9ibGFja19zY2hvbGVzLmps3BBTH06bRAcAAAAzLAAARkZGRkZGOSEVI3NlbGYjAGQxAGQyAHAAcwB0AHIAxUwbFUbqFgFWJB9OAQRNYWluRAEGTm9ybWFsFgNWJB9OAQRNYWluRAEDY2RmKOAl4RYDViQfTgEETWFpbkQBASoo4SXjFgFWJB9OAQRNYWluRAEGTm9ybWFsFgNWJB9OAQRNYWluRAEDY2RmKOMl4hYCViQfTgEETWFpbkQBAS0l5hYDViQfTgEETWFpbkQBASoo5SXlFgJWJB9OAQRNYWluRAEDZXhwKOYWBFYkH04BBE1haW5EAQEqKOQl5CjnFgNWJB9OAQRNYWluRAEBLSjiKOg6KOkVAAbqAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAADqFd9OFUbgNBABDExpbmVJbmZvTm9kZR9Om0QfTgEETWFpbkQBAyM1OCwEAP3fFQAB5qIBAmQxAQJkMnV4eXcV5gAICAgICAhORk5OCQEAAAAAAAAACf//////////TExMTE7mKQ==")), Dict{String, Any}(), Sample(var"#58#62"(), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "33", true, true) => Future(nothing, "33", true, true))
curr_delayed_task.effects = Dict("32" => "CONST", "12" => "CONST", "17" => "CONST", "27" => "CONST", "2" => "CONST", "7" => "CONST", "33" => "MUT", "30" => "CONST")
size = 0
size = 1024000040
size = 1024000040
size = 1024000040
size = 1024000040
size = 1024000040
size = 1024000040
size = 1024000040
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}()
curr_delayed_task.effects = Dict("34" => "CONST", "28" => "CONST")
size = 8
size = 8
size = 0
size = 0
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0EAECIysfTp5E")), Dict{String, Any}(), Sample(+, Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
size = 0
size = 0
Location("None", "None", Dict{String, Any}(), Dict{String, Any}(), Sample(nothing, Dict{Symbol, Any}(:memory_usage => 0, :rate => 2)))
None
dims = Colon()
size = 0
size = 0
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0EAEFQ29sb24fTp5E")), Dict{String, Any}(), Sample(Colon(), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
size = 0
size = 0
Location("Value", "None", Dict{String, Any}("value" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0EAEFUGFpcnMfTp4BCUl0ZXJhdG9yc0QEAAAAR0dLEAEKTmFtZWRUdXBsZR9Om0QCAAAAREs0LAIARA==")), Dict{String, Any}(), Sample(Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}(), Dict{Symbol, Any}(:memory_usage => 0, :rate => 1)))
Value
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "37", true, true) => Future(nothing, "37", true, true), Future(nothing, "36", true, true) => Future(nothing, "36", true, true))
curr_delayed_task.effects = Dict("39" => "CONST", "36" => "MUT", "38" => "CONST", "33" => "CONST", "37" => "MUT", "35" => "CONST")
size(A) = (128000000,)
dims = Colon()
size = 0
size = 1024000040
size = 0
size = 0
size = 8
size = 0
size = 0
size = 8
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "37", true, true) => Future(nothing, "37", true, true))
curr_delayed_task.effects = Dict("37" => "MUT")
size = 8
t.mutation = Dict{Future, Future}(Future(nothing, "2", true, true) => Future(nothing, "2", true, true))
t.effects = Dict("4" => "CONST", "1" => "CONST", "2" => "MUT")
t.mutation = Dict{Future, Future}(Future(nothing, "7", true, true) => Future(nothing, "7", true, true))
t.effects = Dict("7" => "MUT", "6" => "CONST", "9" => "CONST")
t.mutation = Dict{Future, Future}(Future(nothing, "12", true, true) => Future(nothing, "12", true, true))
t.effects = Dict("12" => "MUT", "11" => "CONST", "14" => "CONST")
t.mutation = Dict{Future, Future}(Future(nothing, "17", true, true) => Future(nothing, "17", true, true))
t.effects = Dict("17" => "MUT", "19" => "CONST", "16" => "CONST")
t.mutation = Dict{Future, Future}(Future(nothing, "22", true, true) => Future(nothing, "22", true, true))
t.effects = Dict("24" => "CONST", "21" => "CONST", "22" => "MUT")
t.mutation = Dict{Future, Future}(Future(nothing, "27", true, true) => Future(nothing, "27", true, true))
t.effects = Dict("12" => "CONST", "26" => "CONST", "17" => "CONST", "27" => "MUT", "2" => "CONST", "7" => "CONST", "22" => "CONST")
t.mutation = Dict{Future, Future}()
t.effects = Dict("28" => "CONST", "3" => "CONST")
t.mutation = Dict{Future, Future}(Future(nothing, "30", true, true) => Future(nothing, "30", true, true))
t.effects = Dict("29" => "CONST", "12" => "CONST", "27" => "CONST", "22" => "CONST", "30" => "MUT")
t.mutation = Dict{Future, Future}()
t.effects = Dict("31" => "CONST", "28" => "CONST")
t.mutation = Dict{Future, Future}(Future(nothing, "33", true, true) => Future(nothing, "33", true, true))
t.effects = Dict("32" => "CONST", "12" => "CONST", "17" => "CONST", "27" => "CONST", "2" => "CONST", "7" => "CONST", "33" => "MUT", "30" => "CONST")
t.mutation = Dict{Future, Future}()
t.effects = Dict("34" => "CONST", "28" => "CONST")
t.mutation = Dict{Future, Future}(Future(nothing, "37", true, true) => Future(nothing, "37", true, true), Future(nothing, "36", true, true) => Future(nothing, "36", true, true))
t.effects = Dict("39" => "CONST", "36" => "MUT", "38" => "CONST", "33" => "CONST", "37" => "MUT", "35" => "CONST")
t.mutation = Dict{Future, Future}(Future(nothing, "37", true, true) => Future(nothing, "37", true, true))
t.effects = Dict("37" => "MUT")
"finishing task" = "finishing task"
curr_delayed_task.mutation = Dict{Future, Future}(Future(nothing, "37", true, true) => Future(nothing, "37", true, true))
curr_delayed_task.effects = Dict("37" => "MUT")
t.code = "A = A\nv = v\nfillingdims = fillingdims\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:222 =#\n    A = Base.fill(v, fillingdims)\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:223 =#\n    println(size(A))\nend"
t.value_names = [("2", "A"), ("4", "v"), ("1", "fillingdims")]
t.mutation = Dict{Future, Future}(Future(nothing, "2", true, true) => Future(nothing, "2", true, true))
t.effects = Dict("4" => "CONST", "1" => "CONST", "2" => "MUT")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("4" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("4", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("4", 0)])]))]), "1" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("1", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("1", 0)])]))]), "2" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("1", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("1", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("4", 0), ("4", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("1", 0), ("1", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("2", 0), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("4", 0), ("1", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("4", 1), ("1", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("4", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("1", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("2", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("4" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("4", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("4", 0)])]))]), "1" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("1", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("1", 0)])]))]), "2" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("1", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("1", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("4", 0), ("4", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("1", 0), ("1", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("2", 0), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("4", 0), ("1", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("4", 1), ("1", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("4", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("1", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("2", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("4" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("4", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("4", 0)])]))]), "1" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("1", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("1", 0)])]))]), "2" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("4", 0), ("4", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("1", 0), ("1", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("2", 0), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("4", 0), ("1", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("4", 1), ("1", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("4", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("1", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("2", 1)])]))
t.code = "A = A\nv = v\nfillingdims = fillingdims\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:222 =#\n    A = Base.fill(v, fillingdims)\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:223 =#\n    println(size(A))\nend"
t.value_names = [("7", "A"), ("9", "v"), ("6", "fillingdims")]
t.mutation = Dict{Future, Future}(Future(nothing, "7", true, true) => Future(nothing, "7", true, true))
t.effects = Dict("7" => "MUT", "6" => "CONST", "9" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("7" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0)])]))]), "6" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("6", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("6", 0)])]))]), "9" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("9", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("9", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("6", 0), ("7", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("6", 1), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("7", 0), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("6", 0), ("6", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("9", 0), ("9", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("7", 0), ("6", 0), ("9", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("7", 1), ("6", 1), ("9", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("7", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("6", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("9", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("7" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[]))]), "6" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("6", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("6", 0)])]))]), "9" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("9", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("9", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("6", 0), ("7", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("6", 1), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("7", 0), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("6", 0), ("6", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("9", 0), ("9", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("7", 0), ("6", 0), ("9", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("7", 1), ("6", 1), ("9", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("7", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("6", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("9", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("7" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0)])]))]), "6" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("6", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("6", 0)])]))]), "9" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("9", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("9", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("7", 0), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("6", 0), ("6", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("9", 0), ("9", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("7", 0), ("6", 0), ("9", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("7", 1), ("6", 1), ("9", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("7", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("6", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("9", 1)])]))
t.code = "A = A\nv = v\nfillingdims = fillingdims\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:222 =#\n    A = Base.fill(v, fillingdims)\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:223 =#\n    println(size(A))\nend"
t.value_names = [("12", "A"), ("14", "v"), ("11", "fillingdims")]
t.mutation = Dict{Future, Future}(Future(nothing, "12", true, true) => Future(nothing, "12", true, true))
t.effects = Dict("12" => "MUT", "11" => "CONST", "14" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])]))]), "11" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("11", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("11", 0)])]))]), "14" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("14", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("14", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("11", 0), ("12", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("11", 1), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("11", 0), ("11", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("14", 0), ("14", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 0), ("11", 0), ("14", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 1), ("11", 1), ("14", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("11", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("14", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[]))]), "11" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("11", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("11", 0)])]))]), "14" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("14", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("14", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("11", 0), ("12", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("11", 1), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("11", 0), ("11", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("14", 0), ("14", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 0), ("11", 0), ("14", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 1), ("11", 1), ("14", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("11", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("14", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])]))]), "11" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("11", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("11", 0)])]))]), "14" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("14", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("14", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("11", 0), ("11", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("14", 0), ("14", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 0), ("11", 0), ("14", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 1), ("11", 1), ("14", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("11", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("14", 1)])]))
t.code = "A = A\nv = v\nfillingdims = fillingdims\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:222 =#\n    A = Base.fill(v, fillingdims)\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:223 =#\n    println(size(A))\nend"
t.value_names = [("17", "A"), ("19", "v"), ("16", "fillingdims")]
t.mutation = Dict{Future, Future}(Future(nothing, "17", true, true) => Future(nothing, "17", true, true))
t.effects = Dict("17" => "MUT", "19" => "CONST", "16" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("17" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0)])]))]), "19" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("19", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("19", 0)])]))]), "16" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("16", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("16", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("16", 0), ("17", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("16", 1), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("17", 0), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("19", 0), ("19", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("16", 0), ("16", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("17", 0), ("19", 0), ("16", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("17", 1), ("19", 1), ("16", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("17", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("19", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("16", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("17" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[]))]), "19" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("19", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("19", 0)])]))]), "16" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("16", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("16", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("16", 0), ("17", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("16", 1), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("17", 0), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("19", 0), ("19", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("16", 0), ("16", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("17", 0), ("19", 0), ("16", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("17", 1), ("19", 1), ("16", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("17", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("19", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("16", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("17" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0)])]))]), "19" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("19", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("19", 0)])]))]), "16" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("16", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("16", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("17", 0), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("19", 0), ("19", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("16", 0), ("16", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("17", 0), ("19", 0), ("16", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("17", 1), ("19", 1), ("16", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("17", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("19", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("16", 1)])]))
t.code = "A = A\nv = v\nfillingdims = fillingdims\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:222 =#\n    A = Base.fill(v, fillingdims)\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:223 =#\n    println(size(A))\nend"
t.value_names = [("22", "A"), ("24", "v"), ("21", "fillingdims")]
t.mutation = Dict{Future, Future}(Future(nothing, "22", true, true) => Future(nothing, "22", true, true))
t.effects = Dict("24" => "CONST", "21" => "CONST", "22" => "MUT")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("24" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("24", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("24", 0)])]))]), "21" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("21", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("21", 0)])]))]), "22" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("21", 0), ("22", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("21", 1), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("24", 0), ("24", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("21", 0), ("21", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("22", 0), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("24", 0), ("21", 0), ("22", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("24", 1), ("21", 1), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("24", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("21", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("22", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("24" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("24", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("24", 0)])]))]), "21" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("21", 0)])])), PartitionType(Dict{String, Any}("dividing" => true, "name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("21", 0)])]))]), "22" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("21", 0), ("22", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("21", 1), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("24", 0), ("24", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("21", 0), ("21", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("22", 0), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("24", 0), ("21", 0), ("22", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("24", 1), ("21", 1), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("24", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("21", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("22", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("24" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("24", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("24", 0)])]))]), "21" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("21", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("21", 0)])]))]), "22" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("24", 0), ("24", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("21", 0), ("21", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("22", 0), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("24", 0), ("21", 0), ("22", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("24", 1), ("21", 1), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("24", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("21", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("22", 1)])]))
t.code = "f = f\nc = [c_1, c_2, c_3, c_4, c_5, ]\nres = res\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:338 =#\n    res = Base.map(f, c...)\nend"
t.value_names = [("26", "f"), ("2", "c_1"), ("7", "c_2"), ("12", "c_3"), ("17", "c_4"), ("22", "c_5"), ("27", "res")]
t.mutation = Dict{Future, Future}(Future(nothing, "27", true, true) => Future(nothing, "27", true, true))
t.effects = Dict("12" => "CONST", "26" => "CONST", "17" => "CONST", "27" => "MUT", "2" => "CONST", "7" => "CONST", "22" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])]))]), "26" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("26", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("26", 0)])]))]), "17" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0)])]))]), "27" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0)])]))]), "2" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0)])]))]), "7" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0)])]))]), "22" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("7", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("7", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("12", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("12", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("17", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("17", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("22", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("22", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("27", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("27", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("26", 0), ("26", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("17", 0), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("27", 0), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("2", 0), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("7", 0), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("22", 0), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 0), ("26", 0), ("17", 0), ("27", 0), ("2", 0), ("7", 0), ("22", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 1), ("26", 1), ("17", 1), ("27", 1), ("2", 1), ("7", 1), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("26", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("17", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("27", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("2", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("7", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("22", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0), ("2", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0), ("2", 0)])]))]), "26" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("26", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("26", 0)])]))]), "17" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0), ("2", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0), ("2", 0)])]))]), "27" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0), ("2", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0), ("2", 0)])]))]), "2" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0), ("27", 0)])]))]), "7" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0), ("2", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0), ("2", 0)])]))]), "22" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0), ("2", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0), ("2", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("7", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("7", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("12", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("12", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("17", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("17", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("22", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("22", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("27", 0), ("2", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("27", 1), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("26", 0), ("26", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("17", 0), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("27", 0), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("2", 0), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("7", 0), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("22", 0), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 0), ("26", 0), ("17", 0), ("27", 0), ("2", 0), ("7", 0), ("22", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("12", 1), ("26", 1), ("17", 1), ("27", 1), ("2", 1), ("7", 1), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("26", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("17", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("27", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("2", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("7", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("22", 1)])]))
t.code = "fut = fut\nres = res\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:45 =#\n    res = Base.deepcopy(fut)\nend"
t.value_names = [("3", "fut"), ("28", "res")]
t.mutation = Dict{Future, Future}()
t.effects = Dict("28" => "CONST", "3" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("28" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("28", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("28", 0)])]))]), "3" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("3", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("3", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("28", 0), ("3", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("28", 1), ("3", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("28", 0), ("28", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("3", 0), ("3", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("28", 0), ("3", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("28", 1), ("3", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("28", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("3", 1)])]))
t.code = "f = f\nc = [c_1, c_2, c_3, ]\nres = res\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:338 =#\n    res = Base.map(f, c...)\nend"
t.value_names = [("29", "f"), ("27", "c_1"), ("22", "c_2"), ("12", "c_3"), ("30", "res")]
t.mutation = Dict{Future, Future}(Future(nothing, "30", true, true) => Future(nothing, "30", true, true))
t.effects = Dict("29" => "CONST", "12" => "CONST", "27" => "CONST", "22" => "CONST", "30" => "MUT")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("29" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("29", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("29", 0)])]))]), "12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])]))]), "27" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0)])]))]), "22" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0)])]))]), "30" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("30", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("30", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("22", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("22", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("12", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("12", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("30", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("30", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("29", 0), ("29", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("27", 0), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("22", 0), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("30", 0), ("30", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("29", 0), ("12", 0), ("27", 0), ("22", 0), ("30", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("29", 1), ("12", 1), ("27", 1), ("22", 1), ("30", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("29", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("27", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("22", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("30", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("29" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("29", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("29", 0)])]))]), "12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0), ("27", 0)])]))]), "27" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0), ("30", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0), ("30", 0)])]))]), "22" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("22", 0), ("27", 0)])]))]), "30" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("30", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("30", 0), ("27", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("22", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("22", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("12", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("12", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("30", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("30", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("29", 0), ("29", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("27", 0), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("22", 0), ("22", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("30", 0), ("30", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("29", 0), ("12", 0), ("27", 0), ("22", 0), ("30", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("29", 1), ("12", 1), ("27", 1), ("22", 1), ("30", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("29", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("27", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("22", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("30", 1)])]))
t.code = "fut = fut\nres = res\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:45 =#\n    res = Base.deepcopy(fut)\nend"
t.value_names = [("28", "fut"), ("31", "res")]
t.mutation = Dict{Future, Future}()
t.effects = Dict("31" => "CONST", "28" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("31" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("31", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("31", 0)])]))]), "28" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("28", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("28", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("31", 0), ("28", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("31", 1), ("28", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("31", 0), ("31", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("28", 0), ("28", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("31", 0), ("28", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("31", 1), ("28", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("31", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("28", 1)])]))
t.code = "f = f\nc = [c_1, c_2, c_3, c_4, c_5, c_6, ]\nres = res\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:338 =#\n    res = Base.map(f, c...)\nend"
t.value_names = [("32", "f"), ("27", "c_1"), ("30", "c_2"), ("2", "c_3"), ("7", "c_4"), ("12", "c_5"), ("17", "c_6"), ("33", "res")]
t.mutation = Dict{Future, Future}(Future(nothing, "33", true, true) => Future(nothing, "33", true, true))
t.effects = Dict("32" => "CONST", "12" => "CONST", "17" => "CONST", "27" => "CONST", "2" => "CONST", "7" => "CONST", "33" => "MUT", "30" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("32" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("32", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("32", 0)])]))]), "12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0)])]))]), "17" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0)])]))]), "27" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0)])]))]), "2" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0)])]))]), "7" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0)])]))]), "33" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("33", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("33", 0)])]))]), "30" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("30", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("30", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("30", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("30", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("2", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("2", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("7", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("7", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("12", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("12", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("17", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("17", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("33", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("33", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("32", 0), ("32", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("17", 0), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("27", 0), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("2", 0), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("7", 0), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("33", 0), ("33", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("30", 0), ("30", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("32", 0), ("12", 0), ("17", 0), ("27", 0), ("2", 0), ("7", 0), ("33", 0), ("30", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("32", 1), ("12", 1), ("17", 1), ("27", 1), ("2", 1), ("7", 1), ("33", 1), ("30", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("32", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("17", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("27", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("2", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("7", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("33", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("30", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("32" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("32", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("32", 0)])]))]), "12" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("12", 0), ("27", 0)])]))]), "17" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("17", 0), ("27", 0)])]))]), "27" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0), ("33", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("27", 0), ("33", 0)])]))]), "2" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("2", 0), ("27", 0)])]))]), "7" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("7", 0), ("27", 0)])]))]), "33" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("33", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("33", 0), ("27", 0)])]))]), "30" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("30", 0), ("27", 0)])])), PartitionType(Dict{String, Any}("name" => "Distributing", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("30", 0), ("27", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("30", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("30", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("2", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("2", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("7", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("7", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("12", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("12", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("17", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("17", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("33", 0), ("27", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("33", 1), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("32", 0), ("32", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("12", 0), ("12", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("17", 0), ("17", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("27", 0), ("27", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("2", 0), ("2", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("7", 0), ("7", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("33", 0), ("33", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("30", 0), ("30", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("32", 0), ("12", 0), ("17", 0), ("27", 0), ("2", 0), ("7", 0), ("33", 0), ("30", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("32", 1), ("12", 1), ("17", 1), ("27", 1), ("2", 1), ("7", 1), ("33", 1), ("30", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("32", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("12", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("17", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("27", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("2", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("7", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("33", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("30", 1)])]))
t.code = "fut = fut\nres = res\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:45 =#\n    res = Base.deepcopy(fut)\nend"
t.value_names = [("28", "fut"), ("34", "res")]
t.mutation = Dict{Future, Future}()
t.effects = Dict("34" => "CONST", "28" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("34" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("34", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("34", 0)])]))]), "28" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("28", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating"), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("28", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("34", 0), ("28", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH", Tuple{String, Integer}[("34", 1), ("28", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("34", 0), ("34", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("28", 0), ("28", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("34", 0), ("28", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("34", 1), ("28", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("34", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("28", 1)])]))
t.code = "op = op\nA = A\ndims = dims\nkwargs = kwargs\nres = res\nres_size = res_size\nbegin\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:450 =#\n    if is_debug_on()\n        #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:451 =#\n        #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:451 =# @show size(A)\n        #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:452 =#\n        #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:452 =# @show dims\n    end\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:454 =#\n    res = Base.reduce(op, A; dims = dims, kwargs...)\n    #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:455 =#\n    if res isa Array\n        #= /home/calebwin/Projects/banyan-julia/BanyanArrays/src/array.jl:456 =#\n        res_size = Base.size(res)\n    end\nend"
t.value_names = [("35", "op"), ("33", "A"), ("38", "dims"), ("39", "kwargs"), ("37", "res"), ("36", "res_size")]
t.mutation = Dict{Future, Future}(Future(nothing, "37", true, true) => Future(nothing, "37", true, true), Future(nothing, "36", true, true) => Future(nothing, "36", true, true))
t.effects = Dict("39" => "CONST", "36" => "MUT", "38" => "CONST", "33" => "CONST", "37" => "MUT", "35" => "CONST")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("39" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("39", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("39", 0)])]))]), "36" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "with_key" => true, "replication" => nothing, "reducer" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA1EAEERGljdB9OnkQCAAAAACFGAgAAADkhDWlzX2Jhbnlhbl91ZGZNIQRjb2RlFgIBBWJsb2NrFzG4AQAAAT4vaG9tZS9jYWxlYndpbi9Qcm9qZWN0cy9iYW55YW4tanVsaWEvQmFueWFuQXJyYXlzL3NyYy9hcnJheS5qbBYCAQItPgEEYXhpcxYCAQVibG9jaxcxuAEAACwEABYCAQItPhYCpGZnFgIBBWJsb2NrFzG4AQAALAQAFgVWAQppbmRleGFwcGx5nWZnFgIBAmt3AQVpbmRleAEEYXhpcw==")), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("36", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "with_key" => true, "replication" => nothing, "reducer" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA1EAEERGljdB9OnkQCAAAAACFGAgAAADkhDWlzX2Jhbnlhbl91ZGZNIQRjb2RlFgIBBWJsb2NrFzG4AQAAAT4vaG9tZS9jYWxlYndpbi9Qcm9qZWN0cy9iYW55YW4tanVsaWEvQmFueWFuQXJyYXlzL3NyYy9hcnJheS5qbBYCAQItPgEEYXhpcxYCAQVibG9jaxcxuAEAACwEABYCAQItPhYCpGZnFgIBBWJsb2NrFzG4AQAALAQAFgVWAQppbmRleGFwcGx5nWZnFgIBAmt3AQVpbmRleAEEYXhpcw==")), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("36", 0)])]))]), "38" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("38", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("38", 0)])]))]), "33" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("33", 0)])])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => true), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("33", 0)])]))]), "37" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "with_key" => false, "replication" => nothing, "reducer" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0EAECIysfTp5E")), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("37", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "with_key" => false, "replication" => nothing, "reducer" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0EAECIysfTp5E")), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("37", 0)])]))]), "35" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("35", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("35", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("36", 0), ("33", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("36", 1), ("33", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("39", 0), ("39", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("36", 0), ("36", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("38", 0), ("38", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("33", 0), ("33", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("37", 0), ("37", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("35", 0), ("35", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("39", 0), ("36", 0), ("38", 0), ("33", 0), ("37", 0), ("35", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("39", 1), ("36", 1), ("38", 1), ("33", 1), ("37", 1), ("35", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("39", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("36", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("38", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("33", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("37", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("35", 1)])]))
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("39" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("39", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("39", 0)])]))]), "36" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "with_key" => true, "replication" => nothing, "reducer" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA1EAEERGljdB9OnkQCAAAAACFGAgAAADkhDWlzX2Jhbnlhbl91ZGZNIQRjb2RlFgIBBWJsb2NrFzG4AQAAAT4vaG9tZS9jYWxlYndpbi9Qcm9qZWN0cy9iYW55YW4tanVsaWEvQmFueWFuQXJyYXlzL3NyYy9hcnJheS5qbBYCAQItPgEEYXhpcxYCAQVibG9jaxcxuAEAACwEABYCAQItPhYCpGZnFgIBBWJsb2NrFzG4AQAALAQAFgVWAQppbmRleGFwcGx5nWZnFgIBAmt3AQVpbmRleAEEYXhpcw==")), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("36", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "with_key" => true, "replication" => nothing, "reducer" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA1EAEERGljdB9OnkQCAAAAACFGAgAAADkhDWlzX2Jhbnlhbl91ZGZNIQRjb2RlFgIBBWJsb2NrFzG4AQAAAT4vaG9tZS9jYWxlYndpbi9Qcm9qZWN0cy9iYW55YW4tanVsaWEvQmFueWFuQXJyYXlzL3NyYy9hcnJheS5qbBYCAQItPgEEYXhpcxYCAQVibG9jaxcxuAEAACwEABYCAQItPhYCpGZnFgIBBWJsb2NrFzG4AQAALAQAFgVWAQppbmRleGFwcGx5nWZnFgIBAmt3AQVpbmRleAEEYXhpcw==")), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("36", 0)])]))]), "38" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("38", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("38", 0)])]))]), "33" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[])), PartitionType(Dict{String, Any}("key" => 1, "name" => "Distributing", "distribution" => "blocked", "balanced" => false), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[]))]), "37" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "with_key" => false, "replication" => nothing, "reducer" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0EAECIysfTp5E")), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("37", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "with_key" => false, "replication" => nothing, "reducer" => Dict{String, Any}("is_banyan_value" => true, "contents" => "N0pMDQQAAAA0EAECIysfTp5E")), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("37", 0)])]))]), "35" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("35", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("35", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("36", 0), ("33", 0)]), Banyan.PartitioningConstraintOverGroup("MATCH_ON=key", Tuple{String, Integer}[("36", 1), ("33", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("39", 0), ("39", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("36", 0), ("36", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("38", 0), ("38", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("33", 0), ("33", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("37", 0), ("37", 1)]), Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("35", 0), ("35", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("39", 0), ("36", 0), ("38", 0), ("33", 0), ("37", 0), ("35", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("39", 1), ("36", 1), ("38", 1), ("33", 1), ("37", 1), ("35", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("39", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("36", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("38", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("33", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("37", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("35", 1)])]))
t.code = "fut = fut\nbegin\n    #= /home/calebwin/Projects/banyan-julia/Banyan/src/requests.jl:293 =#\nend"
t.value_names = [("37", "fut")]
t.mutation = Dict{Future, Future}(Future(nothing, "37", true, true) => Future(nothing, "37", true, true))
t.effects = Dict("37" => "MUT")
pa = Banyan.PartitionAnnotation(Banyan.Partitions(Dict{String, Banyan.PartitionTypeComposition}("37" => Banyan.PartitionTypeComposition(PartitionType[PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("37", 0)])])), PartitionType(Dict{String, Any}("name" => "Replicating", "replication" => "all", "reducer" => nothing), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("SCALE_BY=1.0", Tuple{String, Integer}[("37", 0)])]))]))), Banyan.PartitioningConstraints(Union{Banyan.PartitioningConstraintOverGroup, Banyan.PartitioningConstraintOverGroups, Function}[Banyan.PartitioningConstraintOverGroup("CROSS", Tuple{String, Integer}[("37", 0), ("37", 1)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("37", 0)]), Banyan.PartitioningConstraintOverGroup("CO", Tuple{String, Integer}[("37", 1)]), Banyan.PartitioningConstraintOverGroup("SEQUENTIAL", Tuple{String, Integer}[("37", 1)])]))
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) = 1024000040
size = 1024000040
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 2048000080
sample(lt.sample, :rate) = 2
size = 1024000040
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 8
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 0
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 0
sample(lt.sample, :memory_usage) = 0
size = 0
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 1
size = 0
size = 8
sample(lt.sample, :memory_usage) = 0
size = 8
sample(lt.sample, :memory_usage) * sample(lt.sample, :rate) = 0
sample(lt.sample, :rate) = 2
size = 8
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
Waiting for message
JOB_FAILUREERROR: LoadError: LoadError: syntax: unexpected "]"
ERROR: LoadError: LoadError: syntax: unexpected "]"
Stacktrace:
 [1] top-level scope
Stacktrace:
 [1] top-level scope
   @ ~/pt_lib.jl:850
   @ ~/pt_lib.jl:850
 [2] include(fname::String)
 [2] include(fname::String)
   @ Base.MainInclude ./client.jl:444
 [3] top-level scope
   @ ~/executor.jl:3
in expression starting at /home/ec2-user/pt_lib.jl:850
in expression starting at /home/ec2-user/executor.jl:3
   @ Base.MainInclude ./client.jl:444
 [3] top-level scope
   @ ~/executor.jl:3
in expression starting at /home/ec2-user/pt_lib.jl:850
in expression starting at /home/ec2-user/executor.jl:3
srun: error: compute-dy-t3large-1: tasks 0-1: Exited with exit code 1
JOB_FAILURE
MESSAGE_END
[37mBlack Scholes: [39m[91m[1mError During Test[22m[39m at [39m[1m/home/calebwin/Projects/banyan-julia/BanyanArrays/test/test_black_scholes.jl:4[22m
  Got exception outside of a @test
  Job failed; see preceding output
  Stacktrace:
    [1] [0m[1merror[22m[0m[1m([22m[90ms[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4merror.jl:33[0m
    [2] [0m[1mreceive_next_message[22m[0m[1m([22m[90mqueue_name[39m::[0mDict[90m{Symbol, Any}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mqueues.jl:47[0m
    [3] [0m[1mcompute[22m[0m[1m([22m[90mfut[39m::[0mFuture[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mrequests.jl:204[0m
    [4] [0m[1mcollect[22m[0m[1m([22m[90mfut[39m::[0mFuture[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mrequests.jl:296[0m
    [5] [0m[1m(::var"#55#59")[22m[0m[1m([22m[90mjob[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_black_scholes.jl:42[0m
    [6] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m./[39m[90;4mtiming.jl:210[0m[90m [inlined][39m
    [7] [0m[1m(::var"#3#6"{var"#55#59"})[22m[0m[1m([22m[90mj[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:75[0m
    [8] [0m[1mwith_job[22m[0m[1m([22m[90mf[39m::[0mvar"#3#6"[90m{var"#55#59"}[39m; [90mkwargs[39m::[0mBase.Iterators.Pairs[90m{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:job, :destroy_job_on_exit), Tuple{String, Bool}}}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mjobs.jl:185[0m
    [9] [0m[1mrun_with_job[22m[0m[1m([22m[90mtest_fn[39m::[0mvar"#55#59", [90mname[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:70[0m
   [10] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_black_scholes.jl:7[0m[90m [inlined][39m
   [11] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/[39m[90;4mTest.jl:1151[0m[90m [inlined][39m
   [12] top-level scope
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_black_scholes.jl:7[0m
   [13] [0m[1minclude[22m
  [90m    @ [39m[90m./[39m[90;4mclient.jl:444[0m[90m [inlined][39m
   [14] [0m[1minclude_tests_to_run[22m
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:12[0m[90m [inlined][39m
   [15] [0m[1m(::var"#11#12")[22m[0m[1m([22m[90mj[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:118[0m
   [16] [0m[1mwith_job[22m[0m[1m([22m[90mf[39m::[0mvar"#11#12"; [90mkwargs[39m::[0mBase.Iterators.Pairs[90m{Symbol, String, Tuple{Symbol}, NamedTuple{(:job,), Tuple{String}}}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mjobs.jl:185[0m
   [17] top-level scope
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:108[0m
   [18] [0m[1minclude[22m[0m[1m([22m[90mfname[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[90mBase.MainInclude[39m [90m./[39m[90;4mclient.jl:444[0m
   [19] top-level scope
  [90m    @ [39m[90;4mnone:6[0m
   [20] [0m[1meval[22m
  [90m    @ [39m[90m./[39m[90;4mboot.jl:360[0m[90m [inlined][39m
   [21] [0m[1mexec_options[22m[0m[1m([22m[90mopts[39m::[0mBase.JLOptions[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4mclient.jl:261[0m
   [22] [0m[1m_start[22m[0m[1m([22m[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4mclient.jl:485[0m
[37m[1mTest Summary: | [22m[39m[91m[1mError  [22m[39m[36m[1mTotal[22m[39m
Black Scholes | [91m    1  [39m[36m    1[39m
Base.Vector{Float64}
BanyanArrays.Vector{Float64}
BanyanArrays.Vector{Float64}
[37mMapReduce-style computation: [39m[91m[1mError During Test[22m[39m at [39m[1m/home/calebwin/Projects/banyan-julia/BanyanArrays/test/test_mapreduce.jl:1[22m
  Got exception outside of a @test
  Job failed; see preceding output
  Stacktrace:
    [1] [0m[1merror[22m[0m[1m([22m[90ms[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4merror.jl:33[0m
    [2] [0m[1mreceive_next_message[22m[0m[1m([22m[90mqueue_name[39m::[0mDict[90m{Symbol, Any}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mqueues.jl:47[0m
    [3] [0m[1mcompute[22m[0m[1m([22m[90mfut[39m::[0mFuture[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mrequests.jl:204[0m
    [4] [0m[1mcollect[22m[0m[1m([22m[90mfut[39m::[0mFuture[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mrequests.jl:296[0m
    [5] [0m[1m(::var"#13#30")[22m[0m[1m([22m[90mjob[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_mapreduce.jl:10[0m
    [6] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m./[39m[90;4mtiming.jl:210[0m[90m [inlined][39m
    [7] [0m[1m(::var"#3#6"{var"#13#30"})[22m[0m[1m([22m[90mj[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:74[0m
    [8] [0m[1mwith_job[22m[0m[1m([22m[90mf[39m::[0mvar"#3#6"[90m{var"#13#30"}[39m; [90mkwargs[39m::[0mBase.Iterators.Pairs[90m{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:job, :destroy_job_on_exit), Tuple{String, Bool}}}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mjobs.jl:185[0m
    [9] [0m[1mrun_with_job[22m[0m[1m([22m[90mtest_fn[39m::[0mvar"#13#30", [90mname[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:69[0m
   [10] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_mapreduce.jl:2[0m[90m [inlined][39m
   [11] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/[39m[90;4mTest.jl:1151[0m[90m [inlined][39m
   [12] top-level scope
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_mapreduce.jl:2[0m
   [13] [0m[1minclude[22m
  [90m    @ [39m[90m./[39m[90;4mclient.jl:444[0m[90m [inlined][39m
   [14] [0m[1minclude_tests_to_run[22m
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:12[0m[90m [inlined][39m
   [15] [0m[1m(::var"#11#12")[22m[0m[1m([22m[90mj[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:115[0m
   [16] [0m[1mwith_job[22m[0m[1m([22m[90mf[39m::[0mvar"#11#12"; [90mkwargs[39m::[0mBase.Iterators.Pairs[90m{Symbol, String, Tuple{Symbol}, NamedTuple{(:job,), Tuple{String}}}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mjobs.jl:185[0m
   [17] top-level scope
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:107[0m
   [18] [0m[1minclude[22m[0m[1m([22m[90mfname[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[90mBase.MainInclude[39m [90m./[39m[90;4mclient.jl:444[0m
   [19] top-level scope
  [90m    @ [39m[90;4mnone:6[0m
   [20] [0m[1meval[22m
  [90m    @ [39m[90m./[39m[90;4mboot.jl:360[0m[90m [inlined][39m
   [21] [0m[1mexec_options[22m[0m[1m([22m[90mopts[39m::[0mBase.JLOptions[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4mclient.jl:261[0m
   [22] [0m[1m_start[22m[0m[1m([22m[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4mclient.jl:485[0m
[37m[1mTest Summary:               | [22m[39m[91m[1mError  [22m[39m[36m[1mTotal[22m[39m
MapReduce-style computation | [91m    1  [39m[36m    1[39m
Base.Vector{Float64}
BanyanArrays.Vector{Float64}
BanyanArrays.Vector{Float64}
1063.248322 seconds (37.03 M allocations: 2.209 GiB, 0.09% gc time, 0.21% compilation time)
 12.484658 seconds (305.90 k allocations: 19.079 MiB, 2.14% gc time, 0.39% compilation time)
  6.963309 seconds (110.88 k allocations: 7.617 MiB, 4.02% gc time, 0.69% compilation time)
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
174.654629 seconds (1.08 M allocations: 66.661 MiB, 1.40% gc time, 0.38% compilation time)
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
typeof(x) = BanyanArrays.Vector{Float64}
  6.772610 seconds (93.61 k allocations: 6.309 MiB, 4.19% gc time, 0.71% compilation time)
length(x_collect) = 2048
 15.887537 seconds (226.54 k allocations: 14.361 MiB, 3.76% gc time, 0.43% compilation time)
  5.079512 seconds (1.08 M allocations: 66.358 MiB, 2.73% gc time, 11.35% compilation time)
 15.762880 seconds (83.78 k allocations: 7.386 MiB, 3.69% gc time)
  8.386816 seconds (122.83 k allocations: 8.283 MiB, 3.42% gc time, 0.61% compilation time)
 15.776890 seconds (4.11 M allocations: 330.407 MiB, 2.78% gc time, 1.12% compilation time)
[37m[1mTest Summary:               | [22m[39m[32m[1mPass  [22m[39m[36m[1mTotal[22m[39m
MapReduce-style computation | [32m  33  [39m[36m   33[39m
  4.048033 seconds (4.97 M allocations: 281.837 MiB, 2.51% gc time, 28.55% compilation time)
 13.651162 seconds (4.85 M allocations: 292.410 MiB, 4.75% gc time, 15.00% compilation time)
collect(length(x)) = fill(600000)
collect(length(x)) = fill(600000)
 84.668231 seconds (5.95 M allocations: 400.634 MiB, 3.51% gc time, 0.48% compilation time)
[37m[1mTest Summary: | [22m[39m[32m[1mPass  [22m[39m[36m[1mTotal[22m[39m
HDF5          | [32m  36  [39m[36m   36[39m
[37mBlack Scholes: [39m[91m[1mError During Test[22m[39m at [39m[1m/home/calebwin/Projects/banyan-julia/BanyanArrays/test/test_black_scholes.jl:4[22m
  Got exception outside of a @test
  Job failed; see preceding output
  Stacktrace:
    [1] [0m[1merror[22m[0m[1m([22m[90ms[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4merror.jl:33[0m
    [2] [0m[1mreceive_next_message[22m[0m[1m([22m[90mqueue_name[39m::[0mDict[90m{Symbol, Any}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mqueues.jl:47[0m
    [3] [0m[1mcompute[22m[0m[1m([22m[90mfut[39m::[0mFuture[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mrequests.jl:204[0m
    [4] [0m[1mcollect[22m[0m[1m([22m[90mfut[39m::[0mFuture[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mrequests.jl:296[0m
    [5] [0m[1m(::var"#55#59")[22m[0m[1m([22m[90mjob[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_black_scholes.jl:42[0m
    [6] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m./[39m[90;4mtiming.jl:210[0m[90m [inlined][39m
    [7] [0m[1m(::var"#3#6"{var"#55#59"})[22m[0m[1m([22m[90mj[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:74[0m
    [8] [0m[1mwith_job[22m[0m[1m([22m[90mf[39m::[0mvar"#3#6"[90m{var"#55#59"}[39m; [90mkwargs[39m::[0mBase.Iterators.Pairs[90m{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:job, :destroy_job_on_exit), Tuple{String, Bool}}}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mjobs.jl:185[0m
    [9] [0m[1mrun_with_job[22m[0m[1m([22m[90mtest_fn[39m::[0mvar"#55#59", [90mname[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:69[0m
   [10] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_black_scholes.jl:7[0m[90m [inlined][39m
   [11] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/[39m[90;4mTest.jl:1151[0m[90m [inlined][39m
   [12] top-level scope
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_black_scholes.jl:7[0m
   [13] [0m[1minclude[22m
  [90m    @ [39m[90m./[39m[90;4mclient.jl:444[0m[90m [inlined][39m
   [14] [0m[1minclude_tests_to_run[22m
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:12[0m[90m [inlined][39m
   [15] [0m[1m(::var"#11#12")[22m[0m[1m([22m[90mj[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:117[0m
   [16] [0m[1mwith_job[22m[0m[1m([22m[90mf[39m::[0mvar"#11#12"; [90mkwargs[39m::[0mBase.Iterators.Pairs[90m{Symbol, String, Tuple{Symbol}, NamedTuple{(:job,), Tuple{String}}}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mjobs.jl:185[0m
   [17] top-level scope
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:107[0m
   [18] [0m[1minclude[22m[0m[1m([22m[90mfname[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[90mBase.MainInclude[39m [90m./[39m[90;4mclient.jl:444[0m
   [19] top-level scope
  [90m    @ [39m[90;4mnone:6[0m
   [20] [0m[1meval[22m
  [90m    @ [39m[90m./[39m[90;4mboot.jl:360[0m[90m [inlined][39m
   [21] [0m[1mexec_options[22m[0m[1m([22m[90mopts[39m::[0mBase.JLOptions[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4mclient.jl:261[0m
   [22] [0m[1m_start[22m[0m[1m([22m[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4mclient.jl:485[0m
[37m[1mTest Summary: | [22m[39m[91m[1mError  [22m[39m[36m[1mTotal[22m[39m
Black Scholes | [91m    1  [39m[36m    1[39m
[37m[1mTest Summary:               |[22m[39m
MapReduce-style computation | [36mNo tests[39m
[37m[1mTest Summary: |[22m[39m
HDF5          | [36mNo tests[39m
[37mBlack Scholes: [39m[91m[1mError During Test[22m[39m at [39m[1m/home/calebwin/Projects/banyan-julia/BanyanArrays/test/test_black_scholes.jl:4[22m
  Got exception outside of a @test
  Job failed; see preceding output
  Stacktrace:
    [1] [0m[1merror[22m[0m[1m([22m[90ms[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4merror.jl:33[0m
    [2] [0m[1mreceive_next_message[22m[0m[1m([22m[90mqueue_name[39m::[0mDict[90m{Symbol, Any}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mqueues.jl:47[0m
    [3] [0m[1mcompute[22m[0m[1m([22m[90mfut[39m::[0mFuture[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mrequests.jl:204[0m
    [4] [0m[1mcollect[22m[0m[1m([22m[90mfut[39m::[0mFuture[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mrequests.jl:296[0m
    [5] [0m[1m(::var"#55#59")[22m[0m[1m([22m[90mjob[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_black_scholes.jl:42[0m
    [6] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m./[39m[90;4mtiming.jl:210[0m[90m [inlined][39m
    [7] [0m[1m(::var"#3#6"{var"#55#59"})[22m[0m[1m([22m[90mj[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:74[0m
    [8] [0m[1mwith_job[22m[0m[1m([22m[90mf[39m::[0mvar"#3#6"[90m{var"#55#59"}[39m; [90mkwargs[39m::[0mBase.Iterators.Pairs[90m{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:job, :destroy_job_on_exit), Tuple{String, Bool}}}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mjobs.jl:185[0m
    [9] [0m[1mrun_with_job[22m[0m[1m([22m[90mtest_fn[39m::[0mvar"#55#59", [90mname[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:69[0m
   [10] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_black_scholes.jl:7[0m[90m [inlined][39m
   [11] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/[39m[90;4mTest.jl:1151[0m[90m [inlined][39m
   [12] top-level scope
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_black_scholes.jl:7[0m
   [13] [0m[1minclude[22m
  [90m    @ [39m[90m./[39m[90;4mclient.jl:444[0m[90m [inlined][39m
   [14] [0m[1minclude_tests_to_run[22m
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:12[0m[90m [inlined][39m
   [15] [0m[1m(::var"#11#12")[22m[0m[1m([22m[90mj[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:117[0m
   [16] [0m[1mwith_job[22m[0m[1m([22m[90mf[39m::[0mvar"#11#12"; [90mkwargs[39m::[0mBase.Iterators.Pairs[90m{Symbol, String, Tuple{Symbol}, NamedTuple{(:job,), Tuple{String}}}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mjobs.jl:185[0m
   [17] top-level scope
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:107[0m
   [18] [0m[1minclude[22m[0m[1m([22m[90mfname[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[90mBase.MainInclude[39m [90m./[39m[90;4mclient.jl:444[0m
   [19] top-level scope
  [90m    @ [39m[90;4mnone:6[0m
   [20] [0m[1meval[22m
  [90m    @ [39m[90m./[39m[90;4mboot.jl:360[0m[90m [inlined][39m
   [21] [0m[1mexec_options[22m[0m[1m([22m[90mopts[39m::[0mBase.JLOptions[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4mclient.jl:261[0m
   [22] [0m[1m_start[22m[0m[1m([22m[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4mclient.jl:485[0m
[37m[1mTest Summary: | [22m[39m[91m[1mError  [22m[39m[36m[1mTotal[22m[39m
Black Scholes | [91m    1  [39m[36m    1[39m
[37m[1mTest Summary:               |[22m[39m
MapReduce-style computation | [36mNo tests[39m
[37m[1mTest Summary: |[22m[39m
HDF5          | [36mNo tests[39m
JOB_FAILURE0
1
2021-07-28-012034fbbfdf2b4ff25b27ab4cfdec0b2e7a6b
2021-07-28-012034fbbfdf2b4ff25b27ab4cfdec0b2e7a6b
0Executing code
1Executing code
0Executing code
1Executing code
0Executing code
1Executing code
starting exec_code
starting exec_code
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
  [1] Array
    @ ./boot.jl:448 [inlined]
  [2] Array
    @ ./boot.jl:457 [inlined]
  [3] similar
    @ ./array.jl:358 [inlined]
  [4] cat_similar(A::Vector{Float64}, #unused#::Type{Float64}, shape::Tuple{Int64})
    @ Base ./abstractarray.jl:1587
  [5] _cat_t(::Int64, ::Type{Float64}, ::Vector{Float64}, ::Vararg{Vector{Float64}, N} where N)
    @ Base ./abstractarray.jl:1647
  [6] cat_t(::Type{Float64}, ::Vector{Float64}, ::Vararg{Vector{Float64}, N} where N; dims::Int64)
    @ Base ./abstractarray.jl:1643
  [7] _cat(::Int64, ::Vector{Float64}, ::Vararg{Vector{Float64}, N} where N)
    @ SparseArrays /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1119
  [8] cat(::Vector{Float64}, ::Vararg{Vector{Float64}, N} where N; dims::Int64)
    @ Base ./abstractarray.jl:1781
  [9] merge_on_executor(::Vector{Float64}, ::Vararg{Vector{Float64}, N} where N; key::Int64)
    @ Main ~/utils.jl:86
 [10] Merge(src::Vector{Any}, part::Vector{Float64}, params::Dict{String, Any}, batch_idx::Int64, nbatches::Int64, comm::MPI.Comm, loc_name::String, loc_params::Dict{Any, Any})
    @ Main ~/pt_lib.jl:1340
 [11] exec_code(banyan_data::Dict{Any, Any})
    @ Main ./string:314
 [12] top-level scope
    @ ~/executor.jl:85
in expression starting at /home/ec2-user/executor.jl:49
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
  [1] Array
    @ ./boot.jl:448 [inlined]
  [2] Array
    @ ./boot.jl:457 [inlined]
  [3] similar
    @ ./array.jl:358 [inlined]
srun: error: compute-dy-t3large-1: task 0: Exited with exit code 1
  [4] cat_similar(A::Vector{Float64}, #unused#::Type{Float64}, shape::Tuple{Int64})
    @ Base ./abstractarray.jl:1587
  [5] _cat_t(::Int64, ::Type{Float64}, ::Vector{Float64}, ::Vararg{Vector{Float64}, N} where N)
    @ Base ./abstractarray.jl:1647
  [6] cat_t(::Type{Float64}, ::Vector{Float64}, ::Vararg{Vector{Float64}, N} where N; dims::Int64)
    @ Base ./abstractarray.jl:1643
  [7] _cat(::Int64, ::Vector{Float64}, ::Vararg{Vector{Float64}, N} where N)
    @ SparseArrays /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1119
  [8] cat(::Vector{Float64}, ::Vararg{Vector{Float64}, N} where N; dims::Int64)
    @ Base ./abstractarray.jl:1781
  [9] merge_on_executor(::Vector{Float64}, ::Vararg{Vector{Float64}, N} where N; key::Int64)
    @ Main ~/utils.jl:86
 [10] Merge(src::Vector{Any}, part::Vector{Float64}, params::Dict{String, Any}, batch_idx::Int64, nbatches::Int64, comm::MPI.Comm, loc_name::String, loc_params::Dict{Any, Any})
    @ Main ~/pt_lib.jl:1340
 [11] exec_code(banyan_data::Dict{Any, Any})
    @ Main ./string:314
 [12] top-level scope
    @ ~/executor.jl:85
in expression starting at /home/ec2-user/executor.jl:49
slurmstepd: error: compute-dy-t3large-1 [0] pmixp_client_v2.c:210 [_errhandler] mpi/pmix: ERROR: Error handler invoked: status = -25: Interrupted system call (4)
srun: Job step aborted: Waiting up to 32 seconds for job step to finish.
slurmstepd: error: *** STEP 3370.0 ON compute-dy-t3large-1 CANCELLED AT 2021-07-28T01:22:50 ***
srun: error: compute-dy-t3large-1: task 1: Exited with exit code 1
JOB_FAILURE
MESSAGE_END
[37mBlack Scholes: [39m[91m[1mError During Test[22m[39m at [39m[1m/home/calebwin/Projects/banyan-julia/BanyanArrays/test/test_black_scholes.jl:4[22m
  Got exception outside of a @test
  Job failed; see preceding output
  Stacktrace:
    [1] [0m[1merror[22m[0m[1m([22m[90ms[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4merror.jl:33[0m
    [2] [0m[1mreceive_next_message[22m[0m[1m([22m[90mqueue_name[39m::[0mDict[90m{Symbol, Any}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mqueues.jl:47[0m
    [3] [0m[1mcompute[22m[0m[1m([22m[90mfut[39m::[0mFuture[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mrequests.jl:204[0m
    [4] [0m[1mcollect[22m[0m[1m([22m[90mfut[39m::[0mFuture[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mrequests.jl:296[0m
    [5] [0m[1m(::var"#55#59")[22m[0m[1m([22m[90mjob[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_black_scholes.jl:42[0m
    [6] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m./[39m[90;4mtiming.jl:210[0m[90m [inlined][39m
    [7] [0m[1m(::var"#3#6"{var"#55#59"})[22m[0m[1m([22m[90mj[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:74[0m
    [8] [0m[1mwith_job[22m[0m[1m([22m[90mf[39m::[0mvar"#3#6"[90m{var"#55#59"}[39m; [90mkwargs[39m::[0mBase.Iterators.Pairs[90m{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:job, :destroy_job_on_exit), Tuple{String, Bool}}}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mjobs.jl:185[0m
    [9] [0m[1mrun_with_job[22m[0m[1m([22m[90mtest_fn[39m::[0mvar"#55#59", [90mname[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:69[0m
   [10] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_black_scholes.jl:7[0m[90m [inlined][39m
   [11] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/[39m[90;4mTest.jl:1151[0m[90m [inlined][39m
   [12] top-level scope
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_black_scholes.jl:7[0m
   [13] [0m[1minclude[22m
  [90m    @ [39m[90m./[39m[90;4mclient.jl:444[0m[90m [inlined][39m
   [14] [0m[1minclude_tests_to_run[22m
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:12[0m[90m [inlined][39m
   [15] [0m[1m(::var"#11#12")[22m[0m[1m([22m[90mj[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:117[0m
   [16] [0m[1mwith_job[22m[0m[1m([22m[90mf[39m::[0mvar"#11#12"; [90mkwargs[39m::[0mBase.Iterators.Pairs[90m{Symbol, String, Tuple{Symbol}, NamedTuple{(:job,), Tuple{String}}}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mjobs.jl:185[0m
   [17] top-level scope
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:107[0m
   [18] [0m[1minclude[22m[0m[1m([22m[90mfname[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[90mBase.MainInclude[39m [90m./[39m[90;4mclient.jl:444[0m
   [19] top-level scope
  [90m    @ [39m[90;4mnone:6[0m
   [20] [0m[1meval[22m
  [90m    @ [39m[90m./[39m[90;4mboot.jl:360[0m[90m [inlined][39m
   [21] [0m[1mexec_options[22m[0m[1m([22m[90mopts[39m::[0mBase.JLOptions[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4mclient.jl:261[0m
   [22] [0m[1m_start[22m[0m[1m([22m[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4mclient.jl:485[0m
[37m[1mTest Summary: | [22m[39m[91m[1mError  [22m[39m[36m[1mTotal[22m[39m
Black Scholes | [91m    1  [39m[36m    1[39m
[37m[1mTest Summary:               |[22m[39m
MapReduce-style computation | [36mNo tests[39m
[37m[1mTest Summary: |[22m[39m
HDF5          | [36mNo tests[39m
JOB_FAILURE1
0
2021-07-28-012724c6109de8577e06d15c99a9b9ba3f3508
2021-07-28-012724c6109de8577e06d15c99a9b9ba3f3508
1Executing code
0Executing code
1Executing code
0Executing code
1Executing code
0Executing code
starting exec_code
starting exec_code
srun: error: compute-dy-t3large-1: task 1: Killed
ERROR: LoadError: slurmstepd: error: compute-dy-t3large-1 [0] pmixp_client_v2.c:210 [_errhandler] mpi/pmix: ERROR: Error handler invoked: status = -25: Interrupted system call (4)
srun: Job step aborted: Waiting up to 32 seconds for job step to finish.
slurmstepd: error: *** STEP 3372.0 ON compute-dy-t3large-1 CANCELLED AT 2021-07-28T01:29:38 ***
srun: error: compute-dy-t3large-1: task 0: Killed
JOB_FAILURE
MESSAGE_END
[37mBlack Scholes: [39m[91m[1mError During Test[22m[39m at [39m[1m/home/calebwin/Projects/banyan-julia/BanyanArrays/test/test_black_scholes.jl:4[22m
  Got exception outside of a @test
  Job failed; see preceding output
  Stacktrace:
    [1] [0m[1merror[22m[0m[1m([22m[90ms[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4merror.jl:33[0m
    [2] [0m[1mreceive_next_message[22m[0m[1m([22m[90mqueue_name[39m::[0mDict[90m{Symbol, Any}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mqueues.jl:47[0m
    [3] [0m[1mcompute[22m[0m[1m([22m[90mfut[39m::[0mFuture[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mrequests.jl:204[0m
    [4] [0m[1mcollect[22m[0m[1m([22m[90mfut[39m::[0mFuture[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mrequests.jl:296[0m
    [5] [0m[1m(::var"#55#59")[22m[0m[1m([22m[90mjob[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_black_scholes.jl:42[0m
    [6] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m./[39m[90;4mtiming.jl:210[0m[90m [inlined][39m
    [7] [0m[1m(::var"#3#6"{var"#55#59"})[22m[0m[1m([22m[90mj[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:74[0m
    [8] [0m[1mwith_job[22m[0m[1m([22m[90mf[39m::[0mvar"#3#6"[90m{var"#55#59"}[39m; [90mkwargs[39m::[0mBase.Iterators.Pairs[90m{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:job, :destroy_job_on_exit), Tuple{String, Bool}}}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mjobs.jl:185[0m
    [9] [0m[1mrun_with_job[22m[0m[1m([22m[90mtest_fn[39m::[0mvar"#55#59", [90mname[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:69[0m
   [10] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_black_scholes.jl:7[0m[90m [inlined][39m
   [11] [0m[1mmacro expansion[22m
  [90m    @ [39m[90m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/[39m[90;4mTest.jl:1151[0m[90m [inlined][39m
   [12] top-level scope
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mtest_black_scholes.jl:7[0m
   [13] [0m[1minclude[22m
  [90m    @ [39m[90m./[39m[90;4mclient.jl:444[0m[90m [inlined][39m
   [14] [0m[1minclude_tests_to_run[22m
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:12[0m[90m [inlined][39m
   [15] [0m[1m(::var"#11#12")[22m[0m[1m([22m[90mj[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[36mMain[39m [90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:117[0m
   [16] [0m[1mwith_job[22m[0m[1m([22m[90mf[39m::[0mvar"#11#12"; [90mkwargs[39m::[0mBase.Iterators.Pairs[90m{Symbol, String, Tuple{Symbol}, NamedTuple{(:job,), Tuple{String}}}[39m[0m[1m)[22m
  [90m    @ [39m[35mBanyan[39m [90m~/Projects/banyan-julia/Banyan/src/[39m[90;4mjobs.jl:185[0m
   [17] top-level scope
  [90m    @ [39m[90m~/Projects/banyan-julia/BanyanArrays/test/[39m[90;4mruntests.jl:107[0m
   [18] [0m[1minclude[22m[0m[1m([22m[90mfname[39m::[0mString[0m[1m)[22m
  [90m    @ [39m[90mBase.MainInclude[39m [90m./[39m[90;4mclient.jl:444[0m
   [19] top-level scope
  [90m    @ [39m[90;4mnone:6[0m
   [20] [0m[1meval[22m
  [90m    @ [39m[90m./[39m[90;4mboot.jl:360[0m[90m [inlined][39m
   [21] [0m[1mexec_options[22m[0m[1m([22m[90mopts[39m::[0mBase.JLOptions[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4mclient.jl:261[0m
   [22] [0m[1m_start[22m[0m[1m([22m[0m[1m)[22m
  [90m    @ [39m[90mBase[39m [90m./[39m[90;4mclient.jl:485[0m
[37m[1mTest Summary: | [22m[39m[91m[1mError  [22m[39m[36m[1mTotal[22m[39m
Black Scholes | [91m    1  [39m[36m    1[39m
[37m[1mTest Summary:               |[22m[39m
MapReduce-style computation | [36mNo tests[39m
[37m[1mTest Summary: |[22m[39m
HDF5          | [36mNo tests[39m
